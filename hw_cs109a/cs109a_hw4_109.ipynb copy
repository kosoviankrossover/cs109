{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "uaoVZSrv48aE"
   },
   "source": [
    "# <img style=\"float: left; padding-right: 10px; width: 45px\" src=\"https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/iacs.png\"> CS109A Introduction to Data Science: \n",
    "## Homework 4 - Regularization \n",
    "\n",
    "\n",
    "\n",
    "**Harvard University**<br/>\n",
    "**Fall 2018**<br/>\n",
    "**Instructors**: Pavlos Protopapas, Kevin Rader\n",
    "\n",
    "<hr style=\"height:2pt\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "9KsLD_en48aI"
   },
   "source": [
    "### INSTRUCTIONS\n",
    "\n",
    "- **This homework must be completed individually.**\n",
    "\n",
    "- To submit your assignment follow the instructions given in Canvas.\n",
    "- Restart the kernel and run the whole notebook again before you submit. \n",
    "- As much as possible, try and stick to the hints and functions we import at the top of the homework, as those are the ideas and tools the class supports and is aiming to teach. And if a problem specifies a particular library you're required to use that library, and possibly others from the import list.\n",
    "\n",
    "\n",
    "Names of people you have worked with goes here: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "9KsLD_en48aI"
   },
   "source": [
    "<hr style=\"height:2pt\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 886,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 17
    },
    "colab_type": "code",
    "id": "O1guCDAx48aK",
    "outputId": "0aa1afea-ee13-46c0-cdf0-150d57fd1ad8"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       "h1 { \n",
       "    padding-top: 25px;\n",
       "    padding-bottom: 25px;\n",
       "    text-align: left; \n",
       "    padding-left: 10px;\n",
       "    background-color: #DDDDDD; \n",
       "    color: black;\n",
       "}\n",
       "h2 { \n",
       "    padding-top: 10px;\n",
       "    padding-bottom: 10px;\n",
       "    text-align: left; \n",
       "    padding-left: 5px;\n",
       "    background-color: #EEEEEE; \n",
       "    color: black;\n",
       "}\n",
       "\n",
       "div.exercise {\n",
       "\tbackground-color: #ffcccc;\n",
       "\tborder-color: #E9967A; \t\n",
       "\tborder-left: 5px solid #800080; \n",
       "\tpadding: 0.5em;\n",
       "}\n",
       "div.theme {\n",
       "\tbackground-color: #DDDDDD;\n",
       "\tborder-color: #E9967A; \t\n",
       "\tborder-left: 5px solid #800080; \n",
       "\tpadding: 0.5em;\n",
       "\tfont-size: 18pt;\n",
       "}\n",
       "p.q1 { \n",
       "    padding-top: 5px;\n",
       "    padding-bottom: 5px;\n",
       "    text-align: left; \n",
       "    padding-left: 5px;\n",
       "    background-color: #EEEEEE; \n",
       "    color: black;\n",
       "}\n",
       "header {\n",
       "   padding-top: 35px;\n",
       "    padding-bottom: 35px;\n",
       "    text-align: left; \n",
       "    padding-left: 10px;\n",
       "    background-color: #DDDDDD; \n",
       "    color: black;\n",
       "}\n",
       "</style>\n",
       "\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 886,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#RUN THIS CELL \n",
    "import requests\n",
    "from IPython.core.display import HTML\n",
    "styles = requests.get(\"https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/cs109.css\").text\n",
    "HTML(styles)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "7kh0dA7W48ad"
   },
   "source": [
    "import these libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 887,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "j02kGLE-48ah"
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "#warnings.filterwarnings('ignore')\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.linear_model import RidgeCV\n",
    "from sklearn.linear_model import LassoCV\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import LeaveOneOut\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.regression.linear_model import OLS\n",
    "\n",
    "from pandas.core import datetools\n",
    "%matplotlib inline\n",
    "\n",
    "import seaborn as sns\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Continuing Bike Sharing Usage Data\n",
    "\n",
    "In this homework, we will focus on regularization and cross validation. We will continue to build regression models for the [Capital Bikeshare program](https://www.capitalbikeshare.com) in Washington D.C.  See homework 3 for more information about the Capital Bikeshare data that we'll be using extensively. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class='exercise'> <b> Question 1 [20pts]  Data pre-processing </b> </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YNsROjOHaAA2"
   },
   "source": [
    "**1.1** Read in the provided `bikes_student.csv` to a data frame named `bikes_main`. Split it into a training set `bikes_train` and a validation set `bikes_val`. Use `random_state=90`, a test set size of .2, and stratify on month. Remember to specify the data's index column as you read it in.\n",
    "\n",
    "**1.2** As with last homework, the response will be the `counts` column and we'll drop `counts`, `registered` and `casual` for being trivial predictors, drop `workingday` and `month` for being multicollinear with other columns, and `dteday` for being inappropriate for regression. Write code to do this.\n",
    "\n",
    "Encapsulate this process as a function with appropriate inputs and outputs, and **test** your code by producing `practice_y_train` and `practice_X_train`.\n",
    "\n",
    "**1.3** Write a function to standardize a provided subset of columns in your training/validation/test sets. Remember that while you will be scaling all of your data, you must learn the scaling parameters (mean and SD) from only the training set.\n",
    "\n",
    "Test your code by building a list of all non-binary columns in your `practice_X_train` and scaling only those columns. Call the result `practice_X_train_scaled`. Display the `.describe()` and verify that you have correctly scaled all columns, including the polynomial columns.\n",
    "\n",
    "**Hint: employ the provided list of binary columns and use `pd.columns.difference()`**\n",
    "\n",
    "`binary_columns = [ 'holiday', 'workingday','Feb', 'Mar', 'Apr',\n",
    "       'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec', 'spring',\n",
    "       'summer', 'fall', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n",
    "       'Cloudy', 'Snow', 'Storm']`\n",
    "\n",
    "\n",
    "**1.4** Write a code to augment your a dataset with higher-order features for `temp`, `atemp`, `hum`,`windspeed`, and `hour`. You should include ONLY the pure powers of these columns. So with degree=2 you should produce `atemp^2` and `hum^2` but not `atemp*hum` or any other two-feature interactions. \n",
    "\n",
    "\n",
    "Encapsulate this process as a function with appropriate inputs and outputs, and test your code by producing `practice_X_train_poly`, a training dataset with quadratic and cubic features built from `practice_X_train_scaled`, and printing `practice_X_train_poly`'s column names and `.head()`.\n",
    "\n",
    "**1.5** Write code to add interaction terms to the model. Specifically, we want interactions between the continuous predictors (`temp`,`atemp`, `hum`,`windspeed`) and the month and weekday dummies (`Feb`, `Mar`...`Dec`, `Mon`, `Tue`, ... `Sat`). That means you SHOULD build `atemp*Feb` and `hum*Mon` and so on, but NOT `Feb*Mar` and NOT `Feb*Tue`. The interaction terms should always be a continuous feature times a month dummy or a continuous feature times a weekday dummy.\n",
    "\n",
    "\n",
    "Encapsulate this process as a function with appropriate inputs and outputs, and test your code by adding interaction terms to `practice_X_train_poly` and show its column names and `.head()`**\n",
    "\n",
    "**1.6** Combine all your code so far into a function that takes in `bikes_train`, `bikes_val`, the names of columns for polynomial, the target column, the columns to be dropped and produces computation-ready design matrices `X_train` and `X_val` and responses `y_train` and `y_val`. Your final function should build correct, scaled design matrices with the stated interaction terms and any polynomial degree.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solutions "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1.1** Read in the provided `bikes_student.csv` to a data frame named `bikes_main`. Split it into a training set `bikes_train` and a validation set `bikes_val`. Use `random_state=90`, a test set size of .2, and stratify on month. Remember to specify the data's index column as you read it in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 888,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "eWIlhxR39wwq"
   },
   "outputs": [],
   "source": [
    "# read in the data \n",
    "bikes_main = pd.read_csv(\"data/bikes_student.csv\")\n",
    "# correction\n",
    "bikes_main.drop('Unnamed: 0', axis=1, inplace=True)\n",
    "# split\n",
    "bikes_train, bikes_val = train_test_split(bikes_main, test_size = 0.2, stratify=bikes_main['month'], random_state = 90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 889,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dteday</th>\n",
       "      <th>hour</th>\n",
       "      <th>year</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>...</th>\n",
       "      <th>Mon</th>\n",
       "      <th>Tue</th>\n",
       "      <th>Wed</th>\n",
       "      <th>Thu</th>\n",
       "      <th>Fri</th>\n",
       "      <th>Sat</th>\n",
       "      <th>Cloudy</th>\n",
       "      <th>Snow</th>\n",
       "      <th>Storm</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-09-07</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.5758</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-03-21</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.0896</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-08-16</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.6515</td>\n",
       "      <td>0.54</td>\n",
       "      <td>0.1045</td>\n",
       "      <td>58</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-04-28</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.62</td>\n",
       "      <td>0.5758</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0.2985</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-01-04</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.0606</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.3284</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       dteday  hour  year  holiday  workingday  temp   atemp   hum  windspeed  \\\n",
       "0  2011-09-07    19     0        0           1  0.64  0.5758  0.89     0.0000   \n",
       "1  2012-03-21     1     1        0           1  0.52  0.5000  0.83     0.0896   \n",
       "2  2012-08-16    23     1        0           1  0.70  0.6515  0.54     0.1045   \n",
       "3  2011-04-28    13     0        0           1  0.62  0.5758  0.83     0.2985   \n",
       "4  2012-01-04     0     1        0           1  0.08  0.0606  0.42     0.3284   \n",
       "\n",
       "   casual  ...    Mon  Tue  Wed  Thu  Fri  Sat  Cloudy  Snow  Storm  month  \n",
       "0      14  ...      0    0    1    0    0    0       1     0      0      9  \n",
       "1       4  ...      0    0    1    0    0    0       0     0      0      3  \n",
       "2      58  ...      0    0    0    1    0    0       0     0      0      8  \n",
       "3      18  ...      0    0    0    1    0    0       1     0      0      4  \n",
       "4       0  ...      0    0    1    0    0    0       0     0      0      1  \n",
       "\n",
       "[5 rows x 36 columns]"
      ]
     },
     "execution_count": 889,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes_main.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "i0YncxWuaW3k"
   },
   "source": [
    "**1.2** As with last homework, the response will be the `counts` column and we'll drop `counts`, `registered` and `casual` for being trivial predictors, drop `workingday` and `month` for being multicolinear with other columns, and `dteday` for being inappropriate for regression. Write code to do this.\n",
    "\n",
    "Encapsulate this process as a function with appropriate inputs and outputs, and test your code by producing `practice_y_train` and `practice_X_train`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 890,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop function\n",
    "def drop_func(df, L, y):\n",
    "    '''\n",
    "    Drop a set of prectors from Pandas DataFrame\n",
    "    \n",
    "    Inputs:\n",
    "    1) pandas dataframe, df\n",
    "    2) list of column names in df to drop, L\n",
    "    3) optional\n",
    "        -string representing column name of response variable\n",
    "    Output:\n",
    "    1) pandas dataframe with dropped columns\n",
    "    2) optional\n",
    "        -pandas series corresponding to desired response variable\n",
    "    '''\n",
    "    # error handling\n",
    "    try:\n",
    "        # reponse variable to return\n",
    "        response = df[y]\n",
    "        return(response, df.drop(L, axis=1, inplace=False))\n",
    "    except KeyError:\n",
    "        print(\"One or more of the column names not found.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 891,
   "metadata": {},
   "outputs": [],
   "source": [
    "# columns to drop\n",
    "vars_to_drop = ['counts', 'registered', 'casual', 'workingday', 'month', 'dteday']\n",
    "# response variable \n",
    "response = 'counts'\n",
    "# test it out \n",
    "practice_y_train, practice_X_train = drop_func(bikes_train, vars_to_drop, response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 892,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "540    111\n",
       "367    170\n",
       "869     16\n",
       "216     24\n",
       "238    306\n",
       "Name: counts, dtype: int64"
      ]
     },
     "execution_count": 892,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# look at y_train to make sure it's a vector\n",
    "practice_y_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 893,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour</th>\n",
       "      <th>year</th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Feb</th>\n",
       "      <th>Mar</th>\n",
       "      <th>Apr</th>\n",
       "      <th>...</th>\n",
       "      <th>fall</th>\n",
       "      <th>Mon</th>\n",
       "      <th>Tue</th>\n",
       "      <th>Wed</th>\n",
       "      <th>Thu</th>\n",
       "      <th>Fri</th>\n",
       "      <th>Sat</th>\n",
       "      <th>Cloudy</th>\n",
       "      <th>Snow</th>\n",
       "      <th>Storm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>540</th>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.54</td>\n",
       "      <td>0.5152</td>\n",
       "      <td>0.73</td>\n",
       "      <td>0.1045</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.6667</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.2239</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.66</td>\n",
       "      <td>0.6212</td>\n",
       "      <td>0.69</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.3030</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.1343</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.6515</td>\n",
       "      <td>0.61</td>\n",
       "      <td>0.1642</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     hour  year  holiday  temp   atemp   hum  windspeed  Feb  Mar  Apr  ...    \\\n",
       "540    23     1        0  0.54  0.5152  0.73     0.1045    0    0    0  ...     \n",
       "367    11     0        0  0.76  0.6667  0.35     0.2239    0    0    0  ...     \n",
       "869     2     1        0  0.66  0.6212  0.69     0.0000    0    0    0  ...     \n",
       "216     5     1        0  0.30  0.3030  0.81     0.1343    0    0    0  ...     \n",
       "238    21     1        0  0.70  0.6515  0.61     0.1642    0    0    0  ...     \n",
       "\n",
       "     fall  Mon  Tue  Wed  Thu  Fri  Sat  Cloudy  Snow  Storm  \n",
       "540     1    0    1    0    0    0    0       0     0      0  \n",
       "367     0    0    0    1    0    0    0       0     0      0  \n",
       "869     0    0    0    0    0    1    0       0     0      0  \n",
       "216     1    0    0    1    0    0    0       1     0      0  \n",
       "238     0    0    0    0    0    1    0       1     0      0  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 893,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# look at X_train to quickly examine for error\n",
    "practice_X_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Mr3zjw-Y48cx"
   },
   "source": [
    "**1.3** Write a function to standardize a provided subset of columns in your training/validation/test sets. Remember that while you will be scaling all of your data, you must learn the scaling parameters (mean and SD) from only the training set.\n",
    "\n",
    "Test your code by building a list of all non-binary columns in your `practice_X_train` and scaling only those columns. Call the result `practice_X_train_scaled`. Display the `.describe()` and verify that you have correctly scaled all columns, including the polynomial columns.\n",
    "\n",
    "**Hint: employ the provided list of binary columns and use `pd.columns.difference()`**\n",
    "\n",
    "`binary_columns = [ 'holiday', 'workingday','Feb', 'Mar', 'Apr',\n",
    "       'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec', 'spring',\n",
    "       'summer', 'fall', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n",
    "       'Cloudy', 'Snow', 'Storm']`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 894,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 349
    },
    "colab_type": "code",
    "id": "pIm1TIqf48c4",
    "outputId": "af5391ee-8a4b-49da-ade4-4e8411fb412e"
   },
   "outputs": [],
   "source": [
    "# binary columns: do not standardize\n",
    "binary_columns = [ 'holiday', 'workingday','Feb', 'Mar', 'Apr',\n",
    "       'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec', 'spring',\n",
    "       'summer', 'fall', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n",
    "       'Cloudy', 'Snow', 'Storm']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 895,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scale_fun(predictors, train, *args):\n",
    "    '''\n",
    "    Scale a set of prectors from Pandas DataFrame(s)\n",
    "    \n",
    "    Inputs:\n",
    "    1) predictors: the predictores to scale \n",
    "    2) train: pandas dataframe corresponding to training data\n",
    "    3) *args\n",
    "    - optioanal arguments of validation and test set\n",
    "\n",
    "    Outputs: None\n",
    "    -Dataframes are altered inframe\n",
    "    '''\n",
    "    # create the scaler\n",
    "    scaler = StandardScaler().fit(train[predictors])\n",
    "    # scale the validation set \n",
    "    train[predictors] = scaler.transform(train[predictors])\n",
    "    \n",
    "    # if validation and test set passed, scale them too\n",
    "    for arg in args: \n",
    "        arg[predictors] = scaler.transform(arg[predictors])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 896,
   "metadata": {},
   "outputs": [],
   "source": [
    "# find the non-binary columns\n",
    "non_bin_cols = practice_X_train.columns.difference(binary_columns)\n",
    "# test it out\n",
    "practice_X_train_scaled = practice_X_train.copy()\n",
    "scale_fun(non_bin_cols, practice_X_train_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 897,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour</th>\n",
       "      <th>year</th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Feb</th>\n",
       "      <th>Mar</th>\n",
       "      <th>Apr</th>\n",
       "      <th>...</th>\n",
       "      <th>fall</th>\n",
       "      <th>Mon</th>\n",
       "      <th>Tue</th>\n",
       "      <th>Wed</th>\n",
       "      <th>Thu</th>\n",
       "      <th>Fri</th>\n",
       "      <th>Sat</th>\n",
       "      <th>Cloudy</th>\n",
       "      <th>Snow</th>\n",
       "      <th>Storm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>540</th>\n",
       "      <td>1.698810</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>0.244868</td>\n",
       "      <td>0.248775</td>\n",
       "      <td>0.479363</td>\n",
       "      <td>-0.723106</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>-0.046393</td>\n",
       "      <td>-1.018165</td>\n",
       "      <td>0</td>\n",
       "      <td>1.385719</td>\n",
       "      <td>1.132373</td>\n",
       "      <td>-1.538783</td>\n",
       "      <td>0.226495</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>-1.355296</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>0.867151</td>\n",
       "      <td>0.867002</td>\n",
       "      <td>0.266926</td>\n",
       "      <td>-1.554205</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>-0.918995</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.999697</td>\n",
       "      <td>-0.988847</td>\n",
       "      <td>0.904236</td>\n",
       "      <td>-0.486103</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>1.407943</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>1.074578</td>\n",
       "      <td>1.043722</td>\n",
       "      <td>-0.157946</td>\n",
       "      <td>-0.248305</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         hour      year  holiday      temp     atemp       hum  windspeed  \\\n",
       "540  1.698810  0.982159        0  0.244868  0.248775  0.479363  -0.723106   \n",
       "367 -0.046393 -1.018165        0  1.385719  1.132373 -1.538783   0.226495   \n",
       "869 -1.355296  0.982159        0  0.867151  0.867002  0.266926  -1.554205   \n",
       "216 -0.918995  0.982159        0 -0.999697 -0.988847  0.904236  -0.486103   \n",
       "238  1.407943  0.982159        0  1.074578  1.043722 -0.157946  -0.248305   \n",
       "\n",
       "     Feb  Mar  Apr  ...    fall  Mon  Tue  Wed  Thu  Fri  Sat  Cloudy  Snow  \\\n",
       "540    0    0    0  ...       1    0    1    0    0    0    0       0     0   \n",
       "367    0    0    0  ...       0    0    0    1    0    0    0       0     0   \n",
       "869    0    0    0  ...       0    0    0    0    0    1    0       0     0   \n",
       "216    0    0    0  ...       1    0    0    1    0    0    0       1     0   \n",
       "238    0    0    0  ...       0    0    0    0    0    1    0       1     0   \n",
       "\n",
       "     Storm  \n",
       "540      0  \n",
       "367      0  \n",
       "869      0  \n",
       "216      0  \n",
       "238      0  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 897,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# examine\n",
    "practice_X_train_scaled.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 898,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour</th>\n",
       "      <th>year</th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Feb</th>\n",
       "      <th>Mar</th>\n",
       "      <th>Apr</th>\n",
       "      <th>...</th>\n",
       "      <th>fall</th>\n",
       "      <th>Mon</th>\n",
       "      <th>Tue</th>\n",
       "      <th>Wed</th>\n",
       "      <th>Thu</th>\n",
       "      <th>Fri</th>\n",
       "      <th>Sat</th>\n",
       "      <th>Cloudy</th>\n",
       "      <th>Snow</th>\n",
       "      <th>Storm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.00000</td>\n",
       "      <td>1000.00000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-1.994516e-16</td>\n",
       "      <td>2.686740e-17</td>\n",
       "      <td>0.027000</td>\n",
       "      <td>3.019807e-17</td>\n",
       "      <td>-1.256772e-16</td>\n",
       "      <td>5.995204e-17</td>\n",
       "      <td>1.301181e-16</td>\n",
       "      <td>0.078000</td>\n",
       "      <td>0.085000</td>\n",
       "      <td>0.082000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.248000</td>\n",
       "      <td>0.143000</td>\n",
       "      <td>0.148000</td>\n",
       "      <td>0.162000</td>\n",
       "      <td>0.128000</td>\n",
       "      <td>0.12700</td>\n",
       "      <td>0.15000</td>\n",
       "      <td>0.280000</td>\n",
       "      <td>0.082000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>0.162164</td>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>0.268306</td>\n",
       "      <td>0.279021</td>\n",
       "      <td>0.274502</td>\n",
       "      <td>...</td>\n",
       "      <td>0.432068</td>\n",
       "      <td>0.350248</td>\n",
       "      <td>0.355278</td>\n",
       "      <td>0.368635</td>\n",
       "      <td>0.334257</td>\n",
       "      <td>0.33314</td>\n",
       "      <td>0.35725</td>\n",
       "      <td>0.449224</td>\n",
       "      <td>0.274502</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.646163e+00</td>\n",
       "      <td>-1.018165e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-2.347976e+00</td>\n",
       "      <td>-2.402605e+00</td>\n",
       "      <td>-3.397602e+00</td>\n",
       "      <td>-1.554205e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-9.189949e-01</td>\n",
       "      <td>-1.018165e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-7.922693e-01</td>\n",
       "      <td>-8.121270e-01</td>\n",
       "      <td>-7.421467e-01</td>\n",
       "      <td>-7.231056e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-4.639332e-02</td>\n",
       "      <td>9.821591e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.744066e-02</td>\n",
       "      <td>7.147176e-02</td>\n",
       "      <td>5.448995e-02</td>\n",
       "      <td>-1.130295e-02</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.262083e-01</td>\n",
       "      <td>9.821591e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.671507e-01</td>\n",
       "      <td>8.670022e-01</td>\n",
       "      <td>8.511266e-01</td>\n",
       "      <td>4.634972e-01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.698810e+00</td>\n",
       "      <td>9.821591e-01</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.319143e+00</td>\n",
       "      <td>2.546131e+00</td>\n",
       "      <td>1.913309e+00</td>\n",
       "      <td>5.211499e+00</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               hour          year      holiday          temp         atemp  \\\n",
       "count  1.000000e+03  1.000000e+03  1000.000000  1.000000e+03  1.000000e+03   \n",
       "mean  -1.994516e-16  2.686740e-17     0.027000  3.019807e-17 -1.256772e-16   \n",
       "std    1.000500e+00  1.000500e+00     0.162164  1.000500e+00  1.000500e+00   \n",
       "min   -1.646163e+00 -1.018165e+00     0.000000 -2.347976e+00 -2.402605e+00   \n",
       "25%   -9.189949e-01 -1.018165e+00     0.000000 -7.922693e-01 -8.121270e-01   \n",
       "50%   -4.639332e-02  9.821591e-01     0.000000  3.744066e-02  7.147176e-02   \n",
       "75%    8.262083e-01  9.821591e-01     0.000000  8.671507e-01  8.670022e-01   \n",
       "max    1.698810e+00  9.821591e-01     1.000000  2.319143e+00  2.546131e+00   \n",
       "\n",
       "                hum     windspeed          Feb          Mar          Apr  \\\n",
       "count  1.000000e+03  1.000000e+03  1000.000000  1000.000000  1000.000000   \n",
       "mean   5.995204e-17  1.301181e-16     0.078000     0.085000     0.082000   \n",
       "std    1.000500e+00  1.000500e+00     0.268306     0.279021     0.274502   \n",
       "min   -3.397602e+00 -1.554205e+00     0.000000     0.000000     0.000000   \n",
       "25%   -7.421467e-01 -7.231056e-01     0.000000     0.000000     0.000000   \n",
       "50%    5.448995e-02 -1.130295e-02     0.000000     0.000000     0.000000   \n",
       "75%    8.511266e-01  4.634972e-01     0.000000     0.000000     0.000000   \n",
       "max    1.913309e+00  5.211499e+00     1.000000     1.000000     1.000000   \n",
       "\n",
       "        ...           fall          Mon          Tue          Wed  \\\n",
       "count   ...    1000.000000  1000.000000  1000.000000  1000.000000   \n",
       "mean    ...       0.248000     0.143000     0.148000     0.162000   \n",
       "std     ...       0.432068     0.350248     0.355278     0.368635   \n",
       "min     ...       0.000000     0.000000     0.000000     0.000000   \n",
       "25%     ...       0.000000     0.000000     0.000000     0.000000   \n",
       "50%     ...       0.000000     0.000000     0.000000     0.000000   \n",
       "75%     ...       0.000000     0.000000     0.000000     0.000000   \n",
       "max     ...       1.000000     1.000000     1.000000     1.000000   \n",
       "\n",
       "               Thu         Fri         Sat       Cloudy         Snow   Storm  \n",
       "count  1000.000000  1000.00000  1000.00000  1000.000000  1000.000000  1000.0  \n",
       "mean      0.128000     0.12700     0.15000     0.280000     0.082000     0.0  \n",
       "std       0.334257     0.33314     0.35725     0.449224     0.274502     0.0  \n",
       "min       0.000000     0.00000     0.00000     0.000000     0.000000     0.0  \n",
       "25%       0.000000     0.00000     0.00000     0.000000     0.000000     0.0  \n",
       "50%       0.000000     0.00000     0.00000     0.000000     0.000000     0.0  \n",
       "75%       0.000000     0.00000     0.00000     1.000000     0.000000     0.0  \n",
       "max       1.000000     1.00000     1.00000     1.000000     1.000000     0.0  \n",
       "\n",
       "[8 rows x 30 columns]"
      ]
     },
     "execution_count": 898,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# look at X_train to make sure it standardized\n",
    "practice_X_train_scaled.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 899,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "540    111\n",
       "367    170\n",
       "869     16\n",
       "216     24\n",
       "238    306\n",
       "Name: counts, dtype: int64"
      ]
     },
     "execution_count": 899,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# look at y_train to make sure it's a non-standardized vector\n",
    "practice_y_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "zEBl-5bU48ci"
   },
   "source": [
    "**1.4** Write a code to augment your a dataset with higher-order features for `temp`, `atemp`, `hum`,`windspeed`, and `hour`. You should include ONLY pure powers of these columns. So with degree=2 you should produce `atemp^2` and `hum^2` but not `atemp*hum` or any other two-feature interactions. \n",
    "\n",
    "\n",
    "Encapsulate this process as a function with apropriate inputs and outputs, and test your code by producing `practice_X_train_poly`, a training dataset with qudratic and cubic features built from `practice_X_train_scaled`, and printing `practice_X_train_poly`'s column names and `.head()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 900,
   "metadata": {},
   "outputs": [],
   "source": [
    "def poly_fun(df, degree, cols):\n",
    "    '''\n",
    "    Inputs:\n",
    "    1) df: pandas dataframe\n",
    "    2) degree: degree level of polynomial features to add\n",
    "    3) cols: collumns from which to build polynomial feautres\n",
    "    \n",
    "    Outputs: None\n",
    "    -Dataframes are altered inframe\n",
    "    '''\n",
    "    # check polynomial degree\n",
    "    if degree >= 2:\n",
    "        # exception handling for improper column names\n",
    "        try:\n",
    "            # loop through columns\n",
    "            for col in cols:\n",
    "                # create builder to reduce computational need\n",
    "                builder = df[col]\n",
    "                current = df[col]\n",
    "                # loop through degrees\n",
    "                for d in range(2, degree+1):\n",
    "                    current = current*builder\n",
    "                    df[col+'^'+str(d)] = current\n",
    "        except KeyError:\n",
    "            print(\"Check the column input.\")    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 901,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 126
    },
    "colab_type": "code",
    "id": "UXgj9yxu48cj",
    "outputId": "d1e9e4f7-41ab-4cae-a900-e11e0890638e"
   },
   "outputs": [],
   "source": [
    "# the polynomial variables\n",
    "poly_vars = ['temp', 'atemp', 'hum', 'windspeed', 'hour']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 902,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test it \n",
    "practice_X_train_poly = practice_X_train_scaled.copy()\n",
    "poly_fun(practice_X_train_poly, 3, poly_vars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 903,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['hour', 'year', 'holiday', 'temp', 'atemp', 'hum', 'windspeed', 'Feb',\n",
      "       'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec',\n",
      "       'spring', 'summer', 'fall', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n",
      "       'Cloudy', 'Snow', 'Storm', 'temp^2', 'temp^3', 'atemp^2', 'atemp^3',\n",
      "       'hum^2', 'hum^3', 'windspeed^2', 'windspeed^3', 'hour^2', 'hour^3'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour</th>\n",
       "      <th>year</th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Feb</th>\n",
       "      <th>Mar</th>\n",
       "      <th>Apr</th>\n",
       "      <th>...</th>\n",
       "      <th>temp^2</th>\n",
       "      <th>temp^3</th>\n",
       "      <th>atemp^2</th>\n",
       "      <th>atemp^3</th>\n",
       "      <th>hum^2</th>\n",
       "      <th>hum^3</th>\n",
       "      <th>windspeed^2</th>\n",
       "      <th>windspeed^3</th>\n",
       "      <th>hour^2</th>\n",
       "      <th>hour^3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>540</th>\n",
       "      <td>1.698810</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>0.244868</td>\n",
       "      <td>0.248775</td>\n",
       "      <td>0.479363</td>\n",
       "      <td>-0.723106</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.059960</td>\n",
       "      <td>0.014682</td>\n",
       "      <td>0.061889</td>\n",
       "      <td>0.015396</td>\n",
       "      <td>0.229789</td>\n",
       "      <td>0.110152</td>\n",
       "      <td>0.522882</td>\n",
       "      <td>-0.378099</td>\n",
       "      <td>2.885955</td>\n",
       "      <td>4.902689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>-0.046393</td>\n",
       "      <td>-1.018165</td>\n",
       "      <td>0</td>\n",
       "      <td>1.385719</td>\n",
       "      <td>1.132373</td>\n",
       "      <td>-1.538783</td>\n",
       "      <td>0.226495</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.920218</td>\n",
       "      <td>2.660884</td>\n",
       "      <td>1.282270</td>\n",
       "      <td>1.452008</td>\n",
       "      <td>2.367854</td>\n",
       "      <td>-3.643615</td>\n",
       "      <td>0.051300</td>\n",
       "      <td>0.011619</td>\n",
       "      <td>0.002152</td>\n",
       "      <td>-0.000100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>-1.355296</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>0.867151</td>\n",
       "      <td>0.867002</td>\n",
       "      <td>0.266926</td>\n",
       "      <td>-1.554205</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.751950</td>\n",
       "      <td>0.652054</td>\n",
       "      <td>0.751693</td>\n",
       "      <td>0.651719</td>\n",
       "      <td>0.071250</td>\n",
       "      <td>0.019018</td>\n",
       "      <td>2.415552</td>\n",
       "      <td>-3.754263</td>\n",
       "      <td>1.836827</td>\n",
       "      <td>-2.489443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>-0.918995</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.999697</td>\n",
       "      <td>-0.988847</td>\n",
       "      <td>0.904236</td>\n",
       "      <td>-0.486103</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.999394</td>\n",
       "      <td>-0.999091</td>\n",
       "      <td>0.977818</td>\n",
       "      <td>-0.966912</td>\n",
       "      <td>0.817642</td>\n",
       "      <td>0.739341</td>\n",
       "      <td>0.236296</td>\n",
       "      <td>-0.114864</td>\n",
       "      <td>0.844552</td>\n",
       "      <td>-0.776139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>1.407943</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>1.074578</td>\n",
       "      <td>1.043722</td>\n",
       "      <td>-0.157946</td>\n",
       "      <td>-0.248305</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.154718</td>\n",
       "      <td>1.240835</td>\n",
       "      <td>1.089356</td>\n",
       "      <td>1.136984</td>\n",
       "      <td>0.024947</td>\n",
       "      <td>-0.003940</td>\n",
       "      <td>0.061656</td>\n",
       "      <td>-0.015309</td>\n",
       "      <td>1.982303</td>\n",
       "      <td>2.790969</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         hour      year  holiday      temp     atemp       hum  windspeed  \\\n",
       "540  1.698810  0.982159        0  0.244868  0.248775  0.479363  -0.723106   \n",
       "367 -0.046393 -1.018165        0  1.385719  1.132373 -1.538783   0.226495   \n",
       "869 -1.355296  0.982159        0  0.867151  0.867002  0.266926  -1.554205   \n",
       "216 -0.918995  0.982159        0 -0.999697 -0.988847  0.904236  -0.486103   \n",
       "238  1.407943  0.982159        0  1.074578  1.043722 -0.157946  -0.248305   \n",
       "\n",
       "     Feb  Mar  Apr    ...       temp^2    temp^3   atemp^2   atemp^3  \\\n",
       "540    0    0    0    ...     0.059960  0.014682  0.061889  0.015396   \n",
       "367    0    0    0    ...     1.920218  2.660884  1.282270  1.452008   \n",
       "869    0    0    0    ...     0.751950  0.652054  0.751693  0.651719   \n",
       "216    0    0    0    ...     0.999394 -0.999091  0.977818 -0.966912   \n",
       "238    0    0    0    ...     1.154718  1.240835  1.089356  1.136984   \n",
       "\n",
       "        hum^2     hum^3  windspeed^2  windspeed^3    hour^2    hour^3  \n",
       "540  0.229789  0.110152     0.522882    -0.378099  2.885955  4.902689  \n",
       "367  2.367854 -3.643615     0.051300     0.011619  0.002152 -0.000100  \n",
       "869  0.071250  0.019018     2.415552    -3.754263  1.836827 -2.489443  \n",
       "216  0.817642  0.739341     0.236296    -0.114864  0.844552 -0.776139  \n",
       "238  0.024947 -0.003940     0.061656    -0.015309  1.982303  2.790969  \n",
       "\n",
       "[5 rows x 40 columns]"
      ]
     },
     "execution_count": 903,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# examine\n",
    "print(practice_X_train_poly.columns)\n",
    "practice_X_train_poly.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "pK5Mhlqc48dG"
   },
   "source": [
    "**1.5** Write code to add interaction terms to the model. Specifically, we want interactions between the continuous predictors (`temp`,`atemp`, `hum`,`windspeed`) and the month and weekday dummies (`Feb`, `Mar`...`Dec`, `Mon`, `Tue`, ... `Sat`). That means you SHOULD build `atemp*Feb` and `hum*Mon` and so on, but NOT `Feb*Mar` and NOT `Feb*Tue`. The interaction terms should always be a continuous feature times a month dummy or a continuous feature times a weekday dummy.\n",
    "\n",
    "\n",
    "Encapsulate this process as a function with appropriate inputs and outputs, and test your code by adding interaction terms to `practice_X_train_poly` and show its column names and `.head()`**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 904,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gB6wlgj948dP",
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# continuous variables \n",
    "continuous_vars = ['temp', 'atemp', 'hum', 'windspeed']\n",
    "# dummie variables \n",
    "month_weekday = ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 905,
   "metadata": {},
   "outputs": [],
   "source": [
    "def interaction_fun(df, continuous, dummies):\n",
    "    try:\n",
    "        # nested for loop to capture all interactions\n",
    "        for c in continuous:\n",
    "            for d in dummies:\n",
    "                df[c+':'+d] = df[c]*df[d]\n",
    "    except KeyError:\n",
    "        print(\"Check the column input.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 906,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test it \n",
    "interaction_fun(practice_X_train_poly, continuous_vars, month_weekday)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 907,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['hour', 'year', 'holiday', 'temp', 'atemp', 'hum', 'windspeed', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec', 'spring', 'summer', 'fall', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Cloudy', 'Snow', 'Storm', 'temp^2', 'temp^3', 'atemp^2', 'atemp^3', 'hum^2', 'hum^3', 'windspeed^2', 'windspeed^3', 'hour^2', 'hour^3', 'temp:Feb', 'temp:Mar', 'temp:Apr', 'temp:May', 'temp:Jun', 'temp:Jul', 'temp:Aug', 'temp:Sept', 'temp:Oct', 'temp:Nov', 'temp:Dec', 'temp:Mon', 'temp:Tue', 'temp:Wed', 'temp:Thu', 'temp:Fri', 'temp:Sat', 'atemp:Feb', 'atemp:Mar', 'atemp:Apr', 'atemp:May', 'atemp:Jun', 'atemp:Jul', 'atemp:Aug', 'atemp:Sept', 'atemp:Oct', 'atemp:Nov', 'atemp:Dec', 'atemp:Mon', 'atemp:Tue', 'atemp:Wed', 'atemp:Thu', 'atemp:Fri', 'atemp:Sat', 'hum:Feb', 'hum:Mar', 'hum:Apr', 'hum:May', 'hum:Jun', 'hum:Jul', 'hum:Aug', 'hum:Sept', 'hum:Oct', 'hum:Nov', 'hum:Dec', 'hum:Mon', 'hum:Tue', 'hum:Wed', 'hum:Thu', 'hum:Fri', 'hum:Sat', 'windspeed:Feb', 'windspeed:Mar', 'windspeed:Apr', 'windspeed:May', 'windspeed:Jun', 'windspeed:Jul', 'windspeed:Aug', 'windspeed:Sept', 'windspeed:Oct', 'windspeed:Nov', 'windspeed:Dec', 'windspeed:Mon', 'windspeed:Tue', 'windspeed:Wed', 'windspeed:Thu', 'windspeed:Fri', 'windspeed:Sat']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour</th>\n",
       "      <th>year</th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Feb</th>\n",
       "      <th>Mar</th>\n",
       "      <th>Apr</th>\n",
       "      <th>...</th>\n",
       "      <th>windspeed:Sept</th>\n",
       "      <th>windspeed:Oct</th>\n",
       "      <th>windspeed:Nov</th>\n",
       "      <th>windspeed:Dec</th>\n",
       "      <th>windspeed:Mon</th>\n",
       "      <th>windspeed:Tue</th>\n",
       "      <th>windspeed:Wed</th>\n",
       "      <th>windspeed:Thu</th>\n",
       "      <th>windspeed:Fri</th>\n",
       "      <th>windspeed:Sat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>540</th>\n",
       "      <td>1.698810</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>0.244868</td>\n",
       "      <td>0.248775</td>\n",
       "      <td>0.479363</td>\n",
       "      <td>-0.723106</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.723106</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.723106</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>-0.046393</td>\n",
       "      <td>-1.018165</td>\n",
       "      <td>0</td>\n",
       "      <td>1.385719</td>\n",
       "      <td>1.132373</td>\n",
       "      <td>-1.538783</td>\n",
       "      <td>0.226495</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.226495</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>-1.355296</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>0.867151</td>\n",
       "      <td>0.867002</td>\n",
       "      <td>0.266926</td>\n",
       "      <td>-1.554205</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.554205</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>-0.918995</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.999697</td>\n",
       "      <td>-0.988847</td>\n",
       "      <td>0.904236</td>\n",
       "      <td>-0.486103</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.486103</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.486103</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>1.407943</td>\n",
       "      <td>0.982159</td>\n",
       "      <td>0</td>\n",
       "      <td>1.074578</td>\n",
       "      <td>1.043722</td>\n",
       "      <td>-0.157946</td>\n",
       "      <td>-0.248305</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.248305</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 108 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         hour      year  holiday      temp     atemp       hum  windspeed  \\\n",
       "540  1.698810  0.982159        0  0.244868  0.248775  0.479363  -0.723106   \n",
       "367 -0.046393 -1.018165        0  1.385719  1.132373 -1.538783   0.226495   \n",
       "869 -1.355296  0.982159        0  0.867151  0.867002  0.266926  -1.554205   \n",
       "216 -0.918995  0.982159        0 -0.999697 -0.988847  0.904236  -0.486103   \n",
       "238  1.407943  0.982159        0  1.074578  1.043722 -0.157946  -0.248305   \n",
       "\n",
       "     Feb  Mar  Apr      ...        windspeed:Sept  windspeed:Oct  \\\n",
       "540    0    0    0      ...                  -0.0      -0.723106   \n",
       "367    0    0    0      ...                   0.0       0.000000   \n",
       "869    0    0    0      ...                  -0.0      -0.000000   \n",
       "216    0    0    0      ...                  -0.0      -0.486103   \n",
       "238    0    0    0      ...                  -0.0      -0.000000   \n",
       "\n",
       "     windspeed:Nov  windspeed:Dec  windspeed:Mon  windspeed:Tue  \\\n",
       "540           -0.0           -0.0           -0.0      -0.723106   \n",
       "367            0.0            0.0            0.0       0.000000   \n",
       "869           -0.0           -0.0           -0.0      -0.000000   \n",
       "216           -0.0           -0.0           -0.0      -0.000000   \n",
       "238           -0.0           -0.0           -0.0      -0.000000   \n",
       "\n",
       "     windspeed:Wed  windspeed:Thu  windspeed:Fri  windspeed:Sat  \n",
       "540      -0.000000           -0.0      -0.000000           -0.0  \n",
       "367       0.226495            0.0       0.000000            0.0  \n",
       "869      -0.000000           -0.0      -1.554205           -0.0  \n",
       "216      -0.486103           -0.0      -0.000000           -0.0  \n",
       "238      -0.000000           -0.0      -0.248305           -0.0  \n",
       "\n",
       "[5 rows x 108 columns]"
      ]
     },
     "execution_count": 907,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# examine\n",
    "# look at columns \n",
    "# look at head()\n",
    "list_c = []\n",
    "for col in practice_X_train_poly.columns:\n",
    "    list_c.append(col)\n",
    "print(list_c)\n",
    "practice_X_train_poly.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "MGd5qdPu48da"
   },
   "source": [
    "**1.6** Combine all your code so far into a function that takes in `bikes_train`, `bikes_val`, the names of columns for polynomial, the target column, the columns to be dropped and produces computation-ready design matrices `X_train` and `X_val` and responses `y_train` and `y_val`. Your final function should build correct, scaled design matrices with the stated interaction terms and any polynomial degree."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 908,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_design_mats(train_df, val_df,  degree, \n",
    "                    columns_forpoly=['temp', 'atemp', 'hum','windspeed', 'hour'],\n",
    "                    target_col='counts', \n",
    "                    bad_columns=['counts', 'registered', 'casual', 'workingday', 'month', 'dteday']):\n",
    "   \n",
    "    # the dummy variables\n",
    "    month_weekday = ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec','Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n",
    "    # continous variabels diffeent from plynomial variables\n",
    "    continuous_vars = ['temp', 'atemp', 'hum', 'windspeed']\n",
    "\n",
    "    # drop\n",
    "    y_train, x_train = drop_func(train_df, bad_columns, target_col)\n",
    "    y_val, x_val = drop_func(val_df, bad_columns, target_col)\n",
    "    \n",
    "    # scale\n",
    "    scale_fun(columns_forpoly, x_train, x_val)\n",
    "    \n",
    "    # poly\n",
    "    poly_fun(x_train, degree, columns_forpoly)\n",
    "    poly_fun(x_val, degree, columns_forpoly)\n",
    "    \n",
    "    # interactions\n",
    "    interaction_fun(x_train, continuous_vars, month_weekday)\n",
    "    interaction_fun(x_val, continuous_vars, month_weekday)\n",
    "    \n",
    "    return (x_train, y_train, x_val, y_val)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 909,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test it \n",
    "X_train, y_train, X_val, y_val = get_design_mats(bikes_train, bikes_val, degree=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 910,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour</th>\n",
       "      <th>year</th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Feb</th>\n",
       "      <th>Mar</th>\n",
       "      <th>Apr</th>\n",
       "      <th>...</th>\n",
       "      <th>windspeed:Sept</th>\n",
       "      <th>windspeed:Oct</th>\n",
       "      <th>windspeed:Nov</th>\n",
       "      <th>windspeed:Dec</th>\n",
       "      <th>windspeed:Mon</th>\n",
       "      <th>windspeed:Tue</th>\n",
       "      <th>windspeed:Wed</th>\n",
       "      <th>windspeed:Thu</th>\n",
       "      <th>windspeed:Fri</th>\n",
       "      <th>windspeed:Sat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>540</th>\n",
       "      <td>1.698810</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.244868</td>\n",
       "      <td>0.248775</td>\n",
       "      <td>0.479363</td>\n",
       "      <td>-0.723106</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.723106</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.723106</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>-0.046393</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.385719</td>\n",
       "      <td>1.132373</td>\n",
       "      <td>-1.538783</td>\n",
       "      <td>0.226495</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.226495</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>-1.355296</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.867151</td>\n",
       "      <td>0.867002</td>\n",
       "      <td>0.266926</td>\n",
       "      <td>-1.554205</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.554205</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>-0.918995</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.999697</td>\n",
       "      <td>-0.988847</td>\n",
       "      <td>0.904236</td>\n",
       "      <td>-0.486103</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.486103</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.486103</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>1.407943</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.074578</td>\n",
       "      <td>1.043722</td>\n",
       "      <td>-0.157946</td>\n",
       "      <td>-0.248305</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.248305</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 108 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         hour  year  holiday      temp     atemp       hum  windspeed  Feb  \\\n",
       "540  1.698810     1        0  0.244868  0.248775  0.479363  -0.723106    0   \n",
       "367 -0.046393     0        0  1.385719  1.132373 -1.538783   0.226495    0   \n",
       "869 -1.355296     1        0  0.867151  0.867002  0.266926  -1.554205    0   \n",
       "216 -0.918995     1        0 -0.999697 -0.988847  0.904236  -0.486103    0   \n",
       "238  1.407943     1        0  1.074578  1.043722 -0.157946  -0.248305    0   \n",
       "\n",
       "     Mar  Apr      ...        windspeed:Sept  windspeed:Oct  windspeed:Nov  \\\n",
       "540    0    0      ...                  -0.0      -0.723106           -0.0   \n",
       "367    0    0      ...                   0.0       0.000000            0.0   \n",
       "869    0    0      ...                  -0.0      -0.000000           -0.0   \n",
       "216    0    0      ...                  -0.0      -0.486103           -0.0   \n",
       "238    0    0      ...                  -0.0      -0.000000           -0.0   \n",
       "\n",
       "     windspeed:Dec  windspeed:Mon  windspeed:Tue  windspeed:Wed  \\\n",
       "540           -0.0           -0.0      -0.723106      -0.000000   \n",
       "367            0.0            0.0       0.000000       0.226495   \n",
       "869           -0.0           -0.0      -0.000000      -0.000000   \n",
       "216           -0.0           -0.0      -0.000000      -0.486103   \n",
       "238           -0.0           -0.0      -0.000000      -0.000000   \n",
       "\n",
       "     windspeed:Thu  windspeed:Fri  windspeed:Sat  \n",
       "540           -0.0      -0.000000           -0.0  \n",
       "367            0.0       0.000000            0.0  \n",
       "869           -0.0      -1.554205           -0.0  \n",
       "216           -0.0      -0.000000           -0.0  \n",
       "238           -0.0      -0.248305           -0.0  \n",
       "\n",
       "[5 rows x 108 columns]"
      ]
     },
     "execution_count": 910,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# examine\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 911,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour</th>\n",
       "      <th>year</th>\n",
       "      <th>holiday</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>Feb</th>\n",
       "      <th>Mar</th>\n",
       "      <th>Apr</th>\n",
       "      <th>...</th>\n",
       "      <th>windspeed:Sept</th>\n",
       "      <th>windspeed:Oct</th>\n",
       "      <th>windspeed:Nov</th>\n",
       "      <th>windspeed:Dec</th>\n",
       "      <th>windspeed:Mon</th>\n",
       "      <th>windspeed:Tue</th>\n",
       "      <th>windspeed:Wed</th>\n",
       "      <th>windspeed:Thu</th>\n",
       "      <th>windspeed:Fri</th>\n",
       "      <th>windspeed:Sat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>469</th>\n",
       "      <td>-0.191827</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.792269</td>\n",
       "      <td>-1.076915</td>\n",
       "      <td>-1.167020</td>\n",
       "      <td>2.600496</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.600496</td>\n",
       "      <td>2.600496</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>0.826208</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.763437</td>\n",
       "      <td>0.690282</td>\n",
       "      <td>0.744908</td>\n",
       "      <td>-0.723106</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.646163</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.140548</td>\n",
       "      <td>-2.402605</td>\n",
       "      <td>-1.167020</td>\n",
       "      <td>1.057594</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.057594</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>895</th>\n",
       "      <td>-0.337261</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.999697</td>\n",
       "      <td>-1.165566</td>\n",
       "      <td>-0.635928</td>\n",
       "      <td>1.057594</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.057594</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.057594</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>765</th>\n",
       "      <td>-1.355296</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.584842</td>\n",
       "      <td>-0.458687</td>\n",
       "      <td>1.594654</td>\n",
       "      <td>-1.554205</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-1.554205</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.000000</td>\n",
       "      <td>-1.554205</td>\n",
       "      <td>-0.0</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 108 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         hour  year  holiday      temp     atemp       hum  windspeed  Feb  \\\n",
       "469 -0.191827     0        1 -0.792269 -1.076915 -1.167020   2.600496    0   \n",
       "303  0.826208     1        0  0.763437  0.690282  0.744908  -0.723106    0   \n",
       "4   -1.646163     1        0 -2.140548 -2.402605 -1.167020   1.057594    0   \n",
       "895 -0.337261     0        0 -0.999697 -1.165566 -0.635928   1.057594    0   \n",
       "765 -1.355296     0        0 -0.584842 -0.458687  1.594654  -1.554205    0   \n",
       "\n",
       "     Mar  Apr      ...        windspeed:Sept  windspeed:Oct  windspeed:Nov  \\\n",
       "469    0    0      ...                   0.0            0.0       0.000000   \n",
       "303    0    0      ...                  -0.0           -0.0      -0.000000   \n",
       "4      0    0      ...                   0.0            0.0       0.000000   \n",
       "895    0    0      ...                   0.0            0.0       0.000000   \n",
       "765    0    0      ...                  -0.0           -0.0      -1.554205   \n",
       "\n",
       "     windspeed:Dec  windspeed:Mon  windspeed:Tue  windspeed:Wed  \\\n",
       "469       2.600496       2.600496            0.0       0.000000   \n",
       "303      -0.000000      -0.000000           -0.0      -0.000000   \n",
       "4         0.000000       0.000000            0.0       1.057594   \n",
       "895       1.057594       0.000000            0.0       0.000000   \n",
       "765      -0.000000      -0.000000           -0.0      -0.000000   \n",
       "\n",
       "     windspeed:Thu  windspeed:Fri  windspeed:Sat  \n",
       "469       0.000000            0.0            0.0  \n",
       "303      -0.000000           -0.0           -0.0  \n",
       "4         0.000000            0.0            0.0  \n",
       "895       1.057594            0.0            0.0  \n",
       "765      -1.554205           -0.0           -0.0  \n",
       "\n",
       "[5 rows x 108 columns]"
      ]
     },
     "execution_count": 911,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# examine \n",
    "X_val.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 912,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "540    111\n",
      "367    170\n",
      "869     16\n",
      "216     24\n",
      "238    306\n",
      "Name: counts, dtype: int64\n",
      "469     70\n",
      "303    343\n",
      "4        9\n",
      "895    224\n",
      "765      5\n",
      "Name: counts, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# examine \n",
    "print(y_train.head())\n",
    "print(y_val.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class='exercise'> <b> Question 2 [20pts]: Regularization via Ridge </b></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2.1** For each degree in 1 through 8:\n",
    "\n",
    "1.  Build the training design matrix and validation design matrix using the function `get_design_mats` with polynomial terms up through the specified degree.\n",
    "\n",
    "2.  Fit a regression model to the training data.\n",
    "\n",
    "3.  Report the model's score on the validation data.\n",
    "\n",
    "**2.2** Discuss patterns you see in the results from 2.1. Which model would you select, and why?\n",
    "\n",
    "**2.3** Let's try regularizing our models via ridge regression. Build a table showing the validation set $R^2$ of polynomial models with degree from 1-8, regularized at the levels $\\lambda = (.01, .05, .1,.5, 1, 5, 10, 50, 100)$. Do not perform cross validation at this point, simply report performance on the single validation set. \n",
    "\n",
    "**2.4** Find the best-scoring degree and regularization combination.\n",
    "\n",
    "**2.5** It's time to see how well our selected model will do on future data. Read in the provided test dataset, do any required formatting, and report the best model's $R^2$ score. How does it compare to the validation set score that made us choose this model? \n",
    "\n",
    "**2.6** Why do you think our model's test score was quite a bit worse than its validation score? Does the test set simply contain harder examples, or is something else going on?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solutions "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2.1** For each degree in 1 through 8:\n",
    "\n",
    "1.  Build the training design matrix and validation design matrix using the function `get_design_mats` with polynomial terms up through the specified degree.\n",
    "\n",
    "2.  Fit a regression model to the training data.\n",
    "\n",
    "3.  Report the model's score on the validation data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 913,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 380
    },
    "colab_type": "code",
    "id": "VTWx4demHUo0",
    "outputId": "fb9ca7f7-8b7b-42e5-fab8-471ab5f57180"
   },
   "outputs": [],
   "source": [
    "# create dictionary \n",
    "models_linreg = {}\n",
    "# up to what degree\n",
    "to_degree = 8\n",
    "# loop through the degrees to build the models and store the scores\n",
    "for degree in range(1,to_degree+1):\n",
    "    X_train, y_train, X_val, y_val = get_design_mats(bikes_train, bikes_val, degree=degree)\n",
    "    linreg = LinearRegression().fit(X_train, y_train)\n",
    "    models_linreg[degree] = r2_score(y_val, linreg.predict(X_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 914,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1: 0.333359354994\n",
      "2: 0.450571243457\n",
      "3: 0.46147000943\n",
      "4: 0.445117222896\n",
      "5: 0.477026697658\n",
      "6: 0.478535825911\n",
      "7: 0.537901389201\n",
      "8: 0.556700841367\n"
     ]
    }
   ],
   "source": [
    "# dispaly the degree models and their scores\n",
    "for key, value in models_linreg.items():\n",
    "    print(str(key)+': '+str(value))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 915,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x123b429b0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# quick plot of the above \"tab;e\"\n",
    "fig, ax = plt.subplots(1,1, figsize=(10,6))\n",
    "ax.plot(*zip(*sorted(models_linreg.items())))\n",
    "ax.tick_params(axis = 'both', which = 'major', labelsize = 12)\n",
    "ax.set_xlabel('$Degree$', fontsize = 18)\n",
    "ax.set_ylabel('$R^2$', fontsize = 18);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2.2** Discuss patterns you see in the results from 2.1. Which model would you select, and why?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the graph above, I observationally see that the $R^2$ values (generally) continually increase with the overall degree of the polynomial - the outlier being the dip from the third to fourth degree polynomial. What this indicates is that the linear regression of the polynomial terms might contain some real curvature to the model. Based on the one validation set, it is dificult to chooose a model at this point; however, I would select the eighth degree polynomial model because it performs best on the vaildation set. It must be noted, however, that using one validation set it not appropriate as we are likely overfitting to this one validation set. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "sQJ1vesGNwOf"
   },
   "source": [
    "**2.3** Let's try regularizing our models via ridge regression. Build a table showing the validation set $R^2$ of polynomial models with degree from 1-8, regularized at the levels $\\lambda = (.01, .05, .1,.5, 1, 5, 10, 50, 100)$. Do not perform cross validation at this point, simply report performance on the single validation set. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 916,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 224
    },
    "colab_type": "code",
    "id": "GUvYAWHzQAmb",
    "outputId": "7a60ee39-ee8e-46a9-aff7-781580b83717"
   },
   "outputs": [],
   "source": [
    "# set the lambdas \n",
    "lambs = [.01,.05,.1,.5,1.,5.,10.,50.,100.] \n",
    "# the degree \n",
    "degree = 8\n",
    "# length of the lambdas\n",
    "l_lambs = len(lambs)\n",
    "# set the table to negative values of 1\n",
    "ridge_models = np.zeros((8, l_lambs))-1 \n",
    "ridge_models = pd.DataFrame(ridge_models, columns=lambs, index=range(1,degree+1))\n",
    "\n",
    "# nested for loop for lambdas and degree\n",
    "for lamb in lambs:\n",
    "    for degree in range(1,8+1):\n",
    "        X_train, y_train, X_val, y_val = get_design_mats(bikes_train, bikes_val, degree=degree)\n",
    "        ridge_model = Ridge(alpha=lamb).fit(X_train, y_train)\n",
    "        ridge_models.loc[degree,lamb] = r2_score(y_val, ridge_model.predict(X_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 917,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pretify\n",
    "ridge_models.index.name = 'Degree'\n",
    "ridge_models.columns.name = '$\\lambda$'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 918,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>$\\lambda$</th>\n",
       "      <th>0.01</th>\n",
       "      <th>0.05</th>\n",
       "      <th>0.1</th>\n",
       "      <th>0.5</th>\n",
       "      <th>1.0</th>\n",
       "      <th>5.0</th>\n",
       "      <th>10.0</th>\n",
       "      <th>50.0</th>\n",
       "      <th>100.0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Degree</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.334080</td>\n",
       "      <td>0.336304</td>\n",
       "      <td>0.338255</td>\n",
       "      <td>0.344609</td>\n",
       "      <td>0.347257</td>\n",
       "      <td>0.350853</td>\n",
       "      <td>0.350665</td>\n",
       "      <td>0.344274</td>\n",
       "      <td>0.337174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.451156</td>\n",
       "      <td>0.452780</td>\n",
       "      <td>0.454188</td>\n",
       "      <td>0.458877</td>\n",
       "      <td>0.460883</td>\n",
       "      <td>0.462801</td>\n",
       "      <td>0.461559</td>\n",
       "      <td>0.452771</td>\n",
       "      <td>0.445239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.462134</td>\n",
       "      <td>0.464618</td>\n",
       "      <td>0.466883</td>\n",
       "      <td>0.474077</td>\n",
       "      <td>0.477105</td>\n",
       "      <td>0.483068</td>\n",
       "      <td>0.484522</td>\n",
       "      <td>0.476278</td>\n",
       "      <td>0.461331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.445811</td>\n",
       "      <td>0.448144</td>\n",
       "      <td>0.450266</td>\n",
       "      <td>0.457311</td>\n",
       "      <td>0.460495</td>\n",
       "      <td>0.467925</td>\n",
       "      <td>0.470455</td>\n",
       "      <td>0.465925</td>\n",
       "      <td>0.455165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.477542</td>\n",
       "      <td>0.479423</td>\n",
       "      <td>0.481130</td>\n",
       "      <td>0.486581</td>\n",
       "      <td>0.488878</td>\n",
       "      <td>0.493585</td>\n",
       "      <td>0.494745</td>\n",
       "      <td>0.490543</td>\n",
       "      <td>0.483573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.479002</td>\n",
       "      <td>0.480447</td>\n",
       "      <td>0.481850</td>\n",
       "      <td>0.487880</td>\n",
       "      <td>0.491549</td>\n",
       "      <td>0.499810</td>\n",
       "      <td>0.501843</td>\n",
       "      <td>0.500346</td>\n",
       "      <td>0.493281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.538236</td>\n",
       "      <td>0.538785</td>\n",
       "      <td>0.539043</td>\n",
       "      <td>0.537557</td>\n",
       "      <td>0.534172</td>\n",
       "      <td>0.518382</td>\n",
       "      <td>0.511613</td>\n",
       "      <td>0.498093</td>\n",
       "      <td>0.489082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.556881</td>\n",
       "      <td>0.556866</td>\n",
       "      <td>0.556316</td>\n",
       "      <td>0.548542</td>\n",
       "      <td>0.539966</td>\n",
       "      <td>0.515121</td>\n",
       "      <td>0.508435</td>\n",
       "      <td>0.500018</td>\n",
       "      <td>0.494607</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "$\\lambda$    0.01      0.05      0.10      0.50      1.00      5.00    \\\n",
       "Degree                                                                  \n",
       "1          0.334080  0.336304  0.338255  0.344609  0.347257  0.350853   \n",
       "2          0.451156  0.452780  0.454188  0.458877  0.460883  0.462801   \n",
       "3          0.462134  0.464618  0.466883  0.474077  0.477105  0.483068   \n",
       "4          0.445811  0.448144  0.450266  0.457311  0.460495  0.467925   \n",
       "5          0.477542  0.479423  0.481130  0.486581  0.488878  0.493585   \n",
       "6          0.479002  0.480447  0.481850  0.487880  0.491549  0.499810   \n",
       "7          0.538236  0.538785  0.539043  0.537557  0.534172  0.518382   \n",
       "8          0.556881  0.556866  0.556316  0.548542  0.539966  0.515121   \n",
       "\n",
       "$\\lambda$    10.00     50.00     100.00  \n",
       "Degree                                   \n",
       "1          0.350665  0.344274  0.337174  \n",
       "2          0.461559  0.452771  0.445239  \n",
       "3          0.484522  0.476278  0.461331  \n",
       "4          0.470455  0.465925  0.455165  \n",
       "5          0.494745  0.490543  0.483573  \n",
       "6          0.501843  0.500346  0.493281  \n",
       "7          0.511613  0.498093  0.489082  \n",
       "8          0.508435  0.500018  0.494607  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(ridge_models)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "TBwFV1wCTWnw"
   },
   "source": [
    "**2.4** Find the best-scoring degree and regularization combination."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 919,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 90
    },
    "colab_type": "code",
    "id": "1zminoljTm9y",
    "outputId": "b12035c4-5a20-4449-fed4-dcc5e81c0db9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best scoring degree and regularization combination: degree=8, lambda=0.01, r2=0.5568808708072495\n"
     ]
    }
   ],
   "source": [
    "# find the largest score\n",
    "best_r2 = ridge_models.max(axis=1).max()\n",
    "# find the degree of the largest score\n",
    "best_degree = ridge_models.max(axis=1).idxmax()\n",
    "# find the lambda of the largest score\n",
    "best_lamb = ridge_models.max(axis=0).idxmax()\n",
    "print(\"The best scoring degree and regularization combination: degree={0}, lambda={1}, r2={2}\".format(best_dgree, best_lamb, best_r2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "KU3rqk4qU5BK"
   },
   "source": [
    "**2.5** It's time to see how well our selected model will do on future data. Read in the provided test dataset `data/bikes_test.csv`, do any required formatting, and report the best model's $R^2$ score. How does it compare to the validation set score that made us choose this model? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 920,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "cbzfV7HaW_U1"
   },
   "outputs": [],
   "source": [
    "# read in the testing data\n",
    "bikes_test = pd.read_csv(\"data/bikes_test.csv\")\n",
    "# correction\n",
    "bikes_test.drop('Unnamed: 0', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 921,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dteday</th>\n",
       "      <th>hour</th>\n",
       "      <th>year</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>hum</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>...</th>\n",
       "      <th>Mon</th>\n",
       "      <th>Tue</th>\n",
       "      <th>Wed</th>\n",
       "      <th>Thu</th>\n",
       "      <th>Fri</th>\n",
       "      <th>Sat</th>\n",
       "      <th>Cloudy</th>\n",
       "      <th>Snow</th>\n",
       "      <th>Storm</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-12-03</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.2424</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.1343</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-05</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.1970</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.1343</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-02-01</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.2576</td>\n",
       "      <td>0.80</td>\n",
       "      <td>0.0896</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012-05-29</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.74</td>\n",
       "      <td>0.6970</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.2985</td>\n",
       "      <td>67</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-11-03</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.4091</td>\n",
       "      <td>0.82</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       dteday  hour  year  holiday  workingday  temp   atemp   hum  windspeed  \\\n",
       "0  2011-12-03     3     0        0           0  0.24  0.2424  0.70     0.1343   \n",
       "1  2011-01-05    22     0        0           1  0.18  0.1970  0.55     0.1343   \n",
       "2  2011-02-01    14     0        0           1  0.22  0.2576  0.80     0.0896   \n",
       "3  2012-05-29    10     1        0           1  0.74  0.6970  0.70     0.2985   \n",
       "4  2011-11-03    22     0        0           1  0.40  0.4091  0.82     0.0000   \n",
       "\n",
       "   casual  ...    Mon  Tue  Wed  Thu  Fri  Sat  Cloudy  Snow  Storm  month  \n",
       "0       4  ...      0    0    0    0    0    1       0     0      0     12  \n",
       "1       1  ...      0    0    1    0    0    0       0     0      0      1  \n",
       "2       5  ...      0    1    0    0    0    0       1     0      0      2  \n",
       "3      67  ...      0    1    0    0    0    0       0     0      0      5  \n",
       "4      21  ...      0    0    0    1    0    0       0     0      0     11  \n",
       "\n",
       "[5 rows x 36 columns]"
      ]
     },
     "execution_count": 921,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# look at the data\n",
    "bikes_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 922,
   "metadata": {},
   "outputs": [],
   "source": [
    "# grab data\n",
    "X_train, y_train, X_test, y_test = get_design_mats(bikes_main, bikes_test, degree=best_degree)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 923,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wFjeBDXIW7nE"
   },
   "outputs": [],
   "source": [
    "# refit on all of training data with best params\n",
    "best_ridge_model = Ridge(alpha=best_lamb).fit(X_train, y_train)\n",
    "\n",
    "# predict on test data\n",
    "best_ridge_model_r2 = r2_score(y_test, best_ridge_model.predict(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 924,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.586768198362\n"
     ]
    }
   ],
   "source": [
    "print(best_ridge_model_r2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2.6** Why do you think our model's test score was quite a bit worse than its validation score? Does the test set simply contain harder examples, or is something else going on?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general, we find that the test score of a model is worse than the associated validation score. This is because when we are traversing through the process of choosing the best model to run on the testing data, we are optimizing towards the validation set. Further, if the validation set is not representative of the data as a whole, then we expect to find worse predictions - intuitively if you fit a data on a sample which does not represent the population of interest well, then you would get worse predictions; in the worst case scenario, the sample will not be reperesentative of the testing data at all and we would expect our predictions to be extrmelely poor. \n",
    "\n",
    "Interestingly, I find that the model I built actually had a better $R^2$ value than the validation score. The cause of this is likely that the validation data I fit to was actually more variable from the \"true\" data than the testing data is as a whole, so when I predicted on the testing data, better results showed. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class='exercise'><b> Question 3 [20pts]: Comparing Ridge, Lasso, and OLS </b> </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3.1** Build a dataset with polynomial degree 1 and fit an OLS model, a Ridge model, and a Lasso model. Use `RidgeCV` and `LassoCV` to select the best regularization level from among `(.1,.5,1,5,10,50,100)`. \n",
    "\n",
    "Note: On the lasso model, you will need to increase `max_iter` to 100,000 for the optimization to converge.\n",
    "\n",
    "**3.2** Plot histograms of the coefficients found by each of OLS, ridge, and lasso. What trends do you see in the magnitude of the coefficients?\n",
    "\n",
    "**3.3** The plots above show the overall distribution of coefficient values in each model, but do not show how each model treats individual coefficients. Build a plot which cleanly presents, for each feature in the data, 1) The coefficient assigned by OLS, 2) the coefficient assigned by ridge, and 3) the coefficient assigned by lasso.\n",
    "\n",
    "**Hint: Bar plots are a possible choice, but you are not required to use them**\n",
    "\n",
    "**Hint: use `xticks` to label coefficients with their feature names**\n",
    "\n",
    "**3.4** What trends do you see in the plot above? How do the three approaches handle the correlated pair `temp` and `atemp`?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solutions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3.1** Build a dataset with polynomial degree 1 and fit an OLS model, a Ridge model, and a Lasso model. Use `RidgeCV` and `LassoCV` to select the best regularization level from among `(.1,.5,1,5,10,50,100)`. \n",
    "\n",
    "Note: On the lasso model, you will need to increase `max_iter` to 100,000 for the optimization to converge."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 926,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create the lambdas\n",
    "lambs = [.1,.5,1.,5.,10.,50.,100]\n",
    "# process the data\n",
    "X_train, y_train, X_val, y_val = get_design_mats(bikes_main, bikes_test, degree=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 927,
   "metadata": {},
   "outputs": [],
   "source": [
    "# regular OLS\n",
    "bikes_OLS = OLS(y_train, sm.add_constant(X_train)).fit()\n",
    "# ridge\n",
    "bikes_RidgeCV = RidgeCV(alphas=lambs, cv=10).fit(X_train, y_train)\n",
    "# lasso\n",
    "bikes_LassoCV = LassoCV(alphas=lambs, cv=10, max_iter=100000).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 928,
   "metadata": {},
   "outputs": [],
   "source": [
    "# grab the betas\n",
    "OLS_betas = bikes_OLS.params\n",
    "Ridge_betas = np.insert(bikes_RidgeCV.coef_, 0, bikes_RidgeCV.intercept_)\n",
    "Lasso_betas = np.insert(bikes_LassoCV.coef_, 0, bikes_LassoCV.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 929,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 929,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# quickk check to make sure we got all the betas\n",
    "len(OLS_betas) == len(Ridge_betas) == len(Lasso_betas)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "**3.2** Plot histograms of the coefficients found by each of OLS, ridge, and lasso. What trends do you see in the magnitude of the coefficients?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's first look at the plot of the $\\beta$ estimates over aone degree plynomial. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 930,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x123f29ba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with sns.axes_style(\"white\"):\n",
    "    fig, ax = plt.subplots(1, 3, figsize=(16, 9), sharey=True)\n",
    "    ax[0].hist(OLS_betas, 20, alpha=0.6)\n",
    "    ax[1].hist(Ridge_betas, 20, alpha=0.6)\n",
    "    ax[2].hist(Lasso_betas, 20, alpha=0.6)\n",
    "\n",
    "    ax[0].set_xlabel(r\"OLS $\\beta$ Values\", fontsize=14)\n",
    "    ax[0].set_ylabel(\"Frequency\", fontsize=14)\n",
    "    ax[1].set_xlabel(r\"Ridge $\\beta$ Values\", fontsize=14)\n",
    "    ax[2].set_xlabel(r\"Lasso $\\beta$ Values\", fontsize=14)\n",
    "    for i in range(3):\n",
    "        ax[i].tick_params(axis = 'both', which = 'major', labelsize = 14)\n",
    "    sns.despine()\n",
    "\n",
    "    plt.suptitle('Histograms of Coefficients', fontsize=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Very quickly, we can see the distinct nature of the Lasso regression from how it affects the scale of the plot; the scale of the above plot is stretched in the vertical direction by the large frequency of zeros present in the distribution of Lasso $\\beta$ values. We know that Lasso regression tends to result in values of zeros for $\\beta$s because of the geometry of the Lasso solution. The Lagrangian formulation of the Lasso regression we usually see can be formulated into a minimization problem where the minimization function becomes the same as the original OLS minimization problem but with additional constraint parameters. These constraints describe the boundary of the polyhedron depicting the feasible region of solutions. Because of the this, we know that the basic feasible solutions will be at the extreme points, which correspond to values of zeros for some $\\beta$s.\n",
    "\n",
    "Further, we see that the range of the $\\beta$s for OLS is larger than that of the Ridge and Lasso regressions. The range of the OLS extends above and below magnitudes of 200, while the Lasso and Ridge Regression have their density located within 50 units of zero. Intuitively, this makes sense as the Ridge and Lasso regression penalize solutions for which the $\\beta$s have large magnitudes. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3.3** The plots above show the overall distribution of coefficient values in each model, but do not show how each model treats individual coefficients. Build a plot which cleanly presents, for each feature in the data, 1) The coefficient assigned by OLS, 2) the coefficient assigned by ridge, and 3) the coefficient assigned by lasso.\n",
    "\n",
    "**Hint: Bar plots are a possible choice, but you are not required to use them**\n",
    "\n",
    "**Hint: use `xticks` to label coefficients with their feature names**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 931,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11c11a9e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.arange(99)\n",
    "\n",
    "with sns.axes_style(\"whitegrid\"):\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(25, 14))\n",
    "    ax.plot(x, OLS_betas, label = \"OLS\", color = 'red', ls = '-', marker = 'o', alpha = 0.5)\n",
    "    ax.plot(x, Ridge_betas, label = \"Ridge\", color = 'green', ls = '-', marker = 'o', alpha = 0.5)\n",
    "    ax.plot(x, Lasso_betas, label = \"Lasso\", color = 'blue', ls = '-', marker = 'o', alpha = 0.5)\n",
    "    ax.axhline(y=0, color='black', linestyle='--', label = \"Zero Line\")\n",
    "    ax.set_xlabel(r'$\\beta$', fontsize = 18)\n",
    "    ax.set_ylabel(r'$\\hat{\\beta}$', fontsize = 18)\n",
    "    ax.set_title(r\"Estiamtes of $\\beta$s\", fontsize = 22)\n",
    "    ax.xaxis.set_ticks(x)\n",
    "    ax.set_xticklabels(list(bikes_OLS.params.index), rotation=90)\n",
    "    ax.tick_params(axis = 'both', which = 'major', labelsize = 14)\n",
    "    ax.legend(fontsize = 16)\n",
    "    sns.despine()\n",
    "    ax.grid(False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3.4** What trends do you see in the plot above? How do the three approaches handle the correlated pair `temp` and `atemp`?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the plot, I see significant spikes in the estimates for the interaction terms of temp with the other variables and atemp with the other variables. This indicates that OLS is using a complex linear combination of these correlated variables to extract a small piece of predictive power to better fit the training data. To me, this indicates that I should reconsider using these interaction terms, and the Ridge and Lasso models agree as the coefficients for these interactions are zero or very close to zero for both models.  \n",
    "\n",
    "Further, we can see how the three approaches handle the two variables alone with no interactions. From the OLS, we see that the coefficients for temp and atemp are large in magnitude and opposite one another, which indicates that the OLS model, again, sees a linear combination of the two variables as a better predictor. From the Lasso and Ridge, we see that these models estimate smaller, positive magnitudes for both variables, indicating that the correlated variables have a similar effect on the response but that a less complicate interplay of the variables is a better overall fit than a linear combination of the two variables with large opposing values for the coefficients."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Further yet, we can see similar trends to the histogram above and trends which we should expect given the varying formulations of the Lasso vs Ridge vs OLS solutions. Looking across the $\\beta$ features, we see great variability in the OLS $\\beta$s around zero. This variability around zero depicts the larger magnitude of the $\\beta$s in the OLS solution over the Ridge and Lasso models. Additionally, from this plot, we can see that the line for the Lasso $\\beta$s hugs the zero line for a large number of features."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class='exercise'> <b> Question 4 [20 pts]: Reflection </b></div>\n",
    "These problems are open-ended, and you are not expected to write more than 2-3 sentences. We are interested in seeing that you have thought about these issues; you will be graded on how well you justify your conclusions here, not on what you conclude."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4.1** Reflect back on the `get_design_mats` function you built. Writing this function useful in your analysis? What issues might you have encountered if you copy/pasted the model-building code instead of tying it together in a function? Does a `get_design_mat` function seem wise in general, or are there better options?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Writing this function was useful because it helped to modularize the larger process of preprocessing the data for modeling. Additionally, the modular nature of the function allowed me to better debug my cooed and generalize it for use. If I were to have copy/pasted the model-building code instead of tying it together in a function, I would have run into significant difficulty anytime I spotted an error, wanted to make a change, or apply it to a different scenario. For example: if I spotted an error in the copy/pasted code written early in the notebook, I would have had to manually go through the entire notebook to fix such an error in addition to fixing any cascading issues that might have appeared as a result. This same reasoning applies to if I wanted to make a change. Additionally, if I wanted to add more features, it would take more time to determine all the dependencies of each line of the copy/pasted code whereas with the function I would know how every piece fits together because of the well-defined functions and sub-functions. Basically, using the function is analogous to using simple bricks to build a complicated home. In general, it makes sense to use a similar function to`get_design_mat` because of all the advantages listed previously and because you can always copy/past the inner functions if it is really needed - i.e. there are no drawbacks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4.2** What are the costs and benefits of applying ridge/lasso regularization to an overfit OLS model, versus setting a specific degree of polynomial or forward selecting features for the model?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The main benefit of adding the ridge or lasso regularization parameters is to reduce the magnitude of the $\\beta$ coefficients which has the effect of decreasing the sensitivity of the $\\beta$ coefficients. For Ridge, there is the added benefit that the solution to this new problem has a closed form solution. For Lasso, although there is no closed form solution and a solver must be used for finding the solution to the computationally intense task, Lasso has the benefit that its formulation induces some of its $\\beta$ coefficients to zero faster than Ridge regression, which works to help define Lasso as a variable selection method. \n",
    "\n",
    "The benefits in using regularization methods over setting a specific degree for the polynomial and/or using polynomial features is that - in a sense - it's more analytically rigorous. In formulating the regularization problems, you have a specific goal you are aiming to solve, and you have a specific solution for these goals. Specifying the degree and/or using variable selection, however, incorporates a large number of heuristics. Forward selection is done to add a predictor to a model that adds enough predictive power to the model to compensate for the model's increased complexity but setting the threshold cutoff for this is not precise and moreover, you cannot check all possible subsets of the data to find $\\textit{the}$ best subset of predictors.\n",
    "\n",
    "In terms of computational power, Lasso requires greater computation because there is no closed form solution that can take advantage of fast computational methods taken from linear algebra. Further, the regularization models require a $\\lambda$ regularization parameter that is exogenous to the data. We can use cross validation to find the $\\lambda$ that best fits the data, but we lose interpretability for what $\\lambda$ is meant to signify."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** 4.3** This pset posed a purely predictive goal: forecast ridership as accurately as possible. How important is interpretability in this context? Considering, e.g., your lasso and ridge models from Question 3, how would you react if the models predicted well, but the coefficient values didn't make sense once interpreted?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the context of a purely predictive goal, interpretability is not as important had it been an inference problem. Our goal is to solely get the prediction correct, so if that is happening, the model can be a black box for all we care (assuming its reliable). However, despite this, it can still be important to have some semblance of what your algorithm is doing. Inference allows you to make conclusions like, \"if I incrementally increase $x_1$, then $y$ should change by $\\beta_1$ because of and as a result of these factors. Inference allows you to address the underlying factors beneath a predictor's importance or lack of importance to the model. This is a problem for example in deep learning. Deep learning produces fantastic predictive power, but we have no idea how to make sense of the flow of information through a neural network and all the activization functions. \n",
    "\n",
    "Since Lasso and Ridge are still fairly able to be interpreted, I would not react too strongly. Those coefficients which were shrunk down or removed completely most likely do not have a significant effect on the response variable. If the coefficients made absolutely no sense, I may take a two-step approach: I would use the predictive algorithm for my prediction, and I would build an inference model to obtain some sense of the interplay between predictors with one another and with the response variable. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "**4.4** Reflect back on our original goal of helping BikeShare predict what demand will be like in the week ahead, and thus how many bikes they can bring in for maintenance. In your view, did we accomplish this goal? If yes, which model would you put into production and why? If not, which model came closest, what other analyses might you conduct, and how likely do you think they are to work"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the best model we obtained from the previous analysis, we see that the $R^2$ on the test data was fairly low, below 0.6. If I were to put a model into production, I would use this as the best predicting model, but I would use it with reservation. I would take the approach of using the model in combination with other models in building an ensemble method and/or using the inference model approach. Additionally, I would consider looking into models outside of the OLS model. OLS assumes normality in data and uses the identity link function; it also assumes data is completely continuous, which it is not because it is count data. And because the response is a measure of counts, I would look towards modeling the data with a Poisson distribution and the log link function, perhaps looking into over dispersion models if the variance is high and so on from there."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "day_level_test.ipynb",
   "provenance": [],
   "toc_visible": true,
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
