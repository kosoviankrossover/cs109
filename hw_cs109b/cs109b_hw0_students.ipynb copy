{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <img style=\"float: left; padding-right: 10px; width: 45px\" src=\"https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/iacs.png\"> CS109B Data Science 2: Advanced Topics in Data Science \n",
    "## Homework 0 - Knowledge Test - Predict Lending Club Defaulters\n",
    "\n",
    "\n",
    "\n",
    "**Harvard University**<br/>\n",
    "**Spring 2019**<br/>\n",
    "**Instructors**: Pavlos Protopapas, Mark Glickman\n",
    "\n",
    "<hr style=\"height:2pt\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       "blockquote { background: #AEDE94; }\n",
       "h1 { \n",
       "    padding-top: 25px;\n",
       "    padding-bottom: 25px;\n",
       "    text-align: left; \n",
       "    padding-left: 10px;\n",
       "    background-color: #DDDDDD; \n",
       "    color: black;\n",
       "}\n",
       "h2 { \n",
       "    padding-top: 10px;\n",
       "    padding-bottom: 10px;\n",
       "    text-align: left; \n",
       "    padding-left: 5px;\n",
       "    background-color: #EEEEEE; \n",
       "    color: black;\n",
       "}\n",
       "\n",
       "div.exercise {\n",
       "\tbackground-color: #ffcccc;\n",
       "\tborder-color: #E9967A; \t\n",
       "\tborder-left: 5px solid #800080; \n",
       "\tpadding: 0.5em;\n",
       "}\n",
       "div.theme {\n",
       "\tbackground-color: #DDDDDD;\n",
       "\tborder-color: #E9967A; \t\n",
       "\tborder-left: 5px solid #800080; \n",
       "\tpadding: 0.5em;\n",
       "\tfont-size: 18pt;\n",
       "}\n",
       "div.gc { \n",
       "\tbackground-color: #AEDE94;\n",
       "\tborder-color: #E9967A; \t \n",
       "\tborder-left: 5px solid #800080; \n",
       "\tpadding: 0.5em;\n",
       "\tfont-size: 12pt;\n",
       "}\n",
       "p.q1 { \n",
       "    padding-top: 5px;\n",
       "    padding-bottom: 5px;\n",
       "    text-align: left; \n",
       "    padding-left: 5px;\n",
       "    background-color: #EEEEEE; \n",
       "    color: black;\n",
       "}\n",
       "header {\n",
       "   padding-top: 35px;\n",
       "    padding-bottom: 35px;\n",
       "    text-align: left; \n",
       "    padding-left: 10px;\n",
       "    background-color: #DDDDDD; \n",
       "    color: black;\n",
       "}\n",
       "</style>\n",
       "\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#RUN THIS CELL \n",
    "import requests\n",
    "from IPython.core.display import HTML\n",
    "styles = requests.get(\"https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/cs109.css\").text\n",
    "HTML(styles)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### INSTRUCTIONS\n",
    "\n",
    "- To submit your assignment follow the instructions given in canvas.\n",
    "- Restart the kernel and run the whole notebook again before you submit.\n",
    "- As much as possible, try and stick to the hints and functions we import at the top of the homework, as those are the ideas and tools the class supports and is aiming to teach. And if a problem specifies a particular library you're required to use that library, and possibly others from the import list.\n",
    "- **This is an individual HW, meant to test your knowledge of CS109a material. It will not be graded BUT you need to turn it in through Canvas.** \n",
    "\n",
    "<hr style=\"height:2pt\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Lending club](https://blog.lendingclub.com/wp-content/uploads/2017/05/LC-Logo-Official-min.png)\n",
    "\n",
    "\n",
    "### Overview \n",
    "\n",
    "[Lending Club](https://en.wikipedia.org/wiki/Lending_Club) is the world's largest peer-to-peer lending platform. The company claims that \\\\$15.98 billion in loans had been originated through its platform up to December 31, 2015.  Lending Club enables borrowers to create unsecured personal loans between \\\\$1,000 and \\\\$40,000. The standard loan period is three years. Investors can search and browse the loan listings on Lending Club website and select loans that they want to invest in based on the information supplied about the borrower, amount of loan, loan grade, and loan purpose. Investors make money from interest. Lending Club makes money by charging borrowers an origination fee and investors a service fee.\n",
    "\n",
    "The dataset for this homework is derived from the full version of [Loan Data](https://www.lendingclub.com/info/download-data.action). Loans are for period Q3-2014, Q4-2015 and Q1-2015. We have done some preprocessing for you. \n",
    "\n",
    "Data dictionary is available for your reference in data folder. Please note that purpose and verification status have been one-hot-encoded, see data dictionary. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use only the libraries below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import time\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "import sklean\n",
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "import statsmodels.api as sm #Linear Regression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "from sklearn.metrics import log_loss, accuracy_score\n",
    "\n",
    "from keras.callbacks import EarlyStopping, ModelCheckpoint\n",
    "\n",
    "\n",
    "import keras \n",
    "from keras.models import Sequential # intitialize the ANN\n",
    "from keras.layers import Dense, Dropout      # create layers\n",
    "\n",
    "from sklearn.ensemble import BaggingClassifier\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<hr style=\"height:2pt\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 1 - Data Exploration\n",
    "\n",
    "**1.1 The dataset is large so we provide it to you as a zip file. Unzip the file and load the dataset from the csv file `data/loans_cs109b.csv` into a pandas dataframe.**  \n",
    "\n",
    "**Display `.shape()` and `.head()` of the dataframe. Which columns are categorical columns? Identify categorical columns programmatically and explain.**\n",
    "\n",
    "**Your target column is `loan_status`. Is this a classification problem or a regression problem?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "loan_dat = pd.read_csv('data/loans_cs109b.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see if we can determine the type of the variable from using information in quick description methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(190287, 87)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>grade</th>\n",
       "      <th>sub_grade</th>\n",
       "      <th>emp_length</th>\n",
       "      <th>home_ownership</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>url</th>\n",
       "      <th>title</th>\n",
       "      <th>...</th>\n",
       "      <th>medical</th>\n",
       "      <th>moving</th>\n",
       "      <th>other</th>\n",
       "      <th>renewable_energy</th>\n",
       "      <th>small_business</th>\n",
       "      <th>vacation</th>\n",
       "      <th>wedding</th>\n",
       "      <th>Not Verified</th>\n",
       "      <th>Source Verified</th>\n",
       "      <th>Verified</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10400</td>\n",
       "      <td>6.99%</td>\n",
       "      <td>A</td>\n",
       "      <td>A3</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1</td>\n",
       "      <td>58000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>114662</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15000</td>\n",
       "      <td>12.39%</td>\n",
       "      <td>C</td>\n",
       "      <td>C1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3</td>\n",
       "      <td>78000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>120463</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7650</td>\n",
       "      <td>13.66%</td>\n",
       "      <td>C</td>\n",
       "      <td>C3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>117549</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21425</td>\n",
       "      <td>15.59%</td>\n",
       "      <td>D</td>\n",
       "      <td>D1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3</td>\n",
       "      <td>63800.0</td>\n",
       "      <td>1</td>\n",
       "      <td>119764</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9600</td>\n",
       "      <td>13.66%</td>\n",
       "      <td>C</td>\n",
       "      <td>C3</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3</td>\n",
       "      <td>69000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>119482</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 87 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   loan_amnt int_rate grade sub_grade  emp_length  home_ownership  annual_inc  \\\n",
       "0      10400    6.99%     A        A3         8.0               1     58000.0   \n",
       "1      15000   12.39%     C        C1        10.0               3     78000.0   \n",
       "2       7650   13.66%     C        C3         0.0               3     50000.0   \n",
       "3      21425   15.59%     D        D1         6.0               3     63800.0   \n",
       "4       9600   13.66%     C        C3        10.0               3     69000.0   \n",
       "\n",
       "   loan_status     url  title  ...  medical  moving  other  renewable_energy  \\\n",
       "0            0  114662      4  ...        0       0      0                 0   \n",
       "1            1  120463      6  ...        0       0      0                 0   \n",
       "2            0  117549      6  ...        0       0      0                 0   \n",
       "3            1  119764      4  ...        0       0      0                 0   \n",
       "4            1  119482      6  ...        0       0      0                 0   \n",
       "\n",
       "   small_business  vacation  wedding  Not Verified  Source Verified  Verified  \n",
       "0               0         0        0             1                0         0  \n",
       "1               0         0        0             0                1         0  \n",
       "2               0         0        0             0                1         0  \n",
       "3               0         0        0             0                1         0  \n",
       "4               0         0        0             0                1         0  \n",
       "\n",
       "[5 rows x 87 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(loan_dat.shape)\n",
    "display(loan_dat.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "loan_amnt                        int64\n",
       "int_rate                        object\n",
       "grade                           object\n",
       "sub_grade                       object\n",
       "emp_length                     float64\n",
       "home_ownership                   int64\n",
       "annual_inc                     float64\n",
       "loan_status                      int64\n",
       "url                              int64\n",
       "title                            int64\n",
       "zip_code                         int64\n",
       "addr_state                       int64\n",
       "dti                            float64\n",
       "delinq_2yrs                      int64\n",
       "earliest_cr_line                 int64\n",
       "fico_range_low                   int64\n",
       "fico_range_high                  int64\n",
       "inq_last_6mths                   int64\n",
       "mths_since_last_delinq         float64\n",
       "open_acc                         int64\n",
       "pub_rec                          int64\n",
       "revol_bal                        int64\n",
       "revol_util                       int64\n",
       "total_acc                        int64\n",
       "initial_list_status              int64\n",
       "collections_12_mths_ex_med       int64\n",
       "mths_since_last_major_derog    float64\n",
       "policy_code                      int64\n",
       "application_type                 int64\n",
       "acc_now_delinq                   int64\n",
       "                                ...   \n",
       "num_sats                         int64\n",
       "num_tl_120dpd_2m               float64\n",
       "num_tl_30dpd                     int64\n",
       "num_tl_90g_dpd_24m               int64\n",
       "num_tl_op_past_12m               int64\n",
       "pct_tl_nvr_dlq                 float64\n",
       "percent_bc_gt_75               float64\n",
       "pub_rec_bankruptcies             int64\n",
       "tax_liens                        int64\n",
       "tot_hi_cred_lim                  int64\n",
       "total_bal_ex_mort                int64\n",
       "total_bc_limit                   int64\n",
       "total_il_high_credit_limit       int64\n",
       "hardship_flag                    int64\n",
       "car                              int64\n",
       "credit_card                      int64\n",
       "debt_consolidation               int64\n",
       "home_improvement                 int64\n",
       "house                            int64\n",
       "major_purchase                   int64\n",
       "medical                          int64\n",
       "moving                           int64\n",
       "other                            int64\n",
       "renewable_energy                 int64\n",
       "small_business                   int64\n",
       "vacation                         int64\n",
       "wedding                          int64\n",
       "Not Verified                     int64\n",
       "Source Verified                  int64\n",
       "Verified                         int64\n",
       "Length: 87, dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(loan_dat.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We do not get anything important from the above, so let's try an offend method. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable                      | # of Unique Entries  | Type\n",
      "loan_amnt                     |                 1277 | not categorical\n",
      "int_rate                      |                   76 | categorical\n",
      "grade                         |                    7 | categorical\n",
      "sub_grade                     |                   35 | categorical\n",
      "emp_length                    |                   12 | categorical\n",
      "home_ownership                |                    4 | categorical\n",
      "annual_inc                    |                14879 | not categorical\n",
      "loan_status                   |                    2 | categorical\n",
      "url                           |               190287 | not categorical\n",
      "title                         |                   29 | categorical\n",
      "zip_code                      |                  867 | not categorical\n",
      "addr_state                    |                   46 | categorical\n",
      "dti                           |                 3996 | not categorical\n",
      "delinq_2yrs                   |                   23 | categorical\n",
      "earliest_cr_line              |                  632 | not categorical\n",
      "fico_range_low                |                   38 | categorical\n",
      "fico_range_high               |                   38 | categorical\n",
      "inq_last_6mths                |                    7 | categorical\n",
      "mths_since_last_delinq        |                  120 | not categorical\n",
      "open_acc                      |                   65 | categorical\n",
      "pub_rec                       |                   18 | categorical\n",
      "revol_bal                     |                46319 | not categorical\n",
      "revol_util                    |                 1158 | not categorical\n",
      "total_acc                     |                  119 | not categorical\n",
      "initial_list_status           |                    2 | categorical\n",
      "collections_12_mths_ex_med    |                   10 | categorical\n",
      "mths_since_last_major_derog   |                  134 | not categorical\n",
      "policy_code                   |                    1 | categorical\n",
      "application_type              |                    1 | categorical\n",
      "acc_now_delinq                |                    6 | categorical\n",
      "tot_coll_amt                  |                 5437 | not categorical\n",
      "tot_cur_bal                   |               134086 | not categorical\n",
      "total_rev_hi_lim              |                 5019 | not categorical\n",
      "acc_open_past_24mths          |                   39 | categorical\n",
      "avg_cur_bal                   |                43700 | not categorical\n",
      "bc_open_to_buy                |                36306 | not categorical\n",
      "bc_util                       |                 1248 | not categorical\n",
      "chargeoff_within_12_mths      |                    6 | categorical\n",
      "delinq_amnt                   |                  513 | not categorical\n",
      "mo_sin_old_il_acct            |                  449 | not categorical\n",
      "mo_sin_old_rev_tl_op          |                  661 | not categorical\n",
      "mo_sin_rcnt_rev_tl_op         |                  204 | not categorical\n",
      "mo_sin_rcnt_tl                |                  135 | not categorical\n",
      "mort_acc                      |                   30 | categorical\n",
      "mths_since_recent_bc          |                  354 | not categorical\n",
      "mths_since_recent_bc_dlq      |                  128 | not categorical\n",
      "mths_since_recent_inq         |                   27 | categorical\n",
      "mths_since_recent_revol_delinq|                  129 | not categorical\n",
      "num_accts_ever_120_pd         |                   28 | categorical\n",
      "num_actv_bc_tl                |                   28 | categorical\n",
      "num_actv_rev_tl               |                   39 | categorical\n",
      "num_bc_sats                   |                   36 | categorical\n",
      "num_bc_tl                     |                   57 | categorical\n",
      "num_il_tl                     |                   91 | categorical\n",
      "num_op_rev_tl                 |                   54 | categorical\n",
      "num_rev_accts                 |                   83 | categorical\n",
      "num_rev_tl_bal_gt_0           |                   38 | categorical\n",
      "num_sats                      |                   65 | categorical\n",
      "num_tl_120dpd_2m              |                    5 | categorical\n",
      "num_tl_30dpd                  |                    5 | categorical\n",
      "num_tl_90g_dpd_24m            |                   21 | categorical\n",
      "num_tl_op_past_12m            |                   26 | categorical\n",
      "pct_tl_nvr_dlq                |                  466 | not categorical\n",
      "percent_bc_gt_75              |                  152 | not categorical\n",
      "pub_rec_bankruptcies          |                   11 | categorical\n",
      "tax_liens                     |                   19 | categorical\n",
      "tot_hi_cred_lim               |               132415 | not categorical\n",
      "total_bal_ex_mort             |                90208 | not categorical\n",
      "total_bc_limit                |                 2581 | not categorical\n",
      "total_il_high_credit_limit    |                79290 | not categorical\n",
      "hardship_flag                 |                    1 | categorical\n",
      "car                           |                    2 | categorical\n",
      "credit_card                   |                    2 | categorical\n",
      "debt_consolidation            |                    2 | categorical\n",
      "home_improvement              |                    2 | categorical\n",
      "house                         |                    2 | categorical\n",
      "major_purchase                |                    2 | categorical\n",
      "medical                       |                    2 | categorical\n",
      "moving                        |                    2 | categorical\n",
      "other                         |                    2 | categorical\n",
      "renewable_energy              |                    2 | categorical\n",
      "small_business                |                    2 | categorical\n",
      "vacation                      |                    2 | categorical\n",
      "wedding                       |                    2 | categorical\n",
      "Not Verified                  |                    2 | categorical\n",
      "Source Verified               |                    2 | categorical\n",
      "Verified                      |                    2 | categorical\n"
     ]
    }
   ],
   "source": [
    "print('{:30}| {:20} | {}'.format('Variable', '# of Unique Entries', 'Type'))\n",
    "for col in loan_dat.columns:\n",
    "    check = len(set(loan_dat[col]))\n",
    "    if check < 100:\n",
    "        print('{:30}| {:20} | {}'.format(col, check, 'categorical'))\n",
    "    else:\n",
    "        print('{:30}| {:20} | {}'.format(col, check, 'not categorical'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above, we look for the number of unique entries in the entries of the variables. In this manner, the binary variables are clear as they will have two unique entries. Of coruse, we could imagine that some categories might have as few as two categories to perhaps even 20 or more. I set the above cutoff for determining cateogories at 100, but this is not definitive and illustrates the importance of familiarizing yourself with the data at hand i.e. the importance of having descriptors for your variabels and reading them. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1.2 Create a plot showing distribution of target column.  Interpret your plot.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ones = sum(loan_dat['loan_status'].values == 1)\n",
    "zeros = loan_dat.shape[0] - ones\n",
    "with sns.axes_style(\"white\"):\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(6, 6))\n",
    "    ax.bar([0,1], [zeros, ones], width=0.3, color = 'k')\n",
    "    ax.set_xticks([0,1])\n",
    "    ax.set_xticklabels(['zeros', 'ones'])\n",
    "    ax.set_xlabel('Class', fontsize=14)\n",
    "    ax.set_ylabel('Freq', fontsize=14)\n",
    "    ax.set_title('Loan Status Dist', fontsize=14)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that there were significantly more status codes of '1' over '0'. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1.3 Create a visualization showing `grade` and `loan_status`. Do the same for `sub_grade`. Interpret your plots.**\n",
    "\n",
    "**Hint:**\n",
    "*Your plot should be able to convey which grade (or subgrade) has highest (and least) number of defaulters. You may create a table or a heatmap.*\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: FutureWarning: using a dict on a Series for aggregation\n",
      "is deprecated and will be removed in a future version\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>success</th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grade</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>1969</td>\n",
       "      <td>33849</td>\n",
       "      <td>0.945028</td>\n",
       "      <td>35818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>6205</td>\n",
       "      <td>44349</td>\n",
       "      <td>0.877260</td>\n",
       "      <td>50554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>10836</td>\n",
       "      <td>41441</td>\n",
       "      <td>0.792720</td>\n",
       "      <td>52277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>9104</td>\n",
       "      <td>21658</td>\n",
       "      <td>0.704050</td>\n",
       "      <td>30762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>5831</td>\n",
       "      <td>9071</td>\n",
       "      <td>0.608710</td>\n",
       "      <td>14902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>2080</td>\n",
       "      <td>2576</td>\n",
       "      <td>0.553265</td>\n",
       "      <td>4656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>674</td>\n",
       "      <td>644</td>\n",
       "      <td>0.488619</td>\n",
       "      <td>1318</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           0      1   success  total\n",
       "grade                               \n",
       "A       1969  33849  0.945028  35818\n",
       "B       6205  44349  0.877260  50554\n",
       "C      10836  41441  0.792720  52277\n",
       "D       9104  21658  0.704050  30762\n",
       "E       5831   9071  0.608710  14902\n",
       "F       2080   2576  0.553265   4656\n",
       "G        674    644  0.488619   1318"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grade_dat = loan_dat.groupby('grade')['loan_status'].agg({'0': lambda x: x.count()-x.sum(), '1': 'sum', 'success': lambda x: x.sum()/x.count(), 'total': 'count'})\n",
    "display(subgrade_dat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: FutureWarning: using a dict on a Series for aggregation\n",
      "is deprecated and will be removed in a future version\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>success</th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sub_grade</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A1</th>\n",
       "      <td>135</td>\n",
       "      <td>5100</td>\n",
       "      <td>0.974212</td>\n",
       "      <td>5235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A2</th>\n",
       "      <td>246</td>\n",
       "      <td>5560</td>\n",
       "      <td>0.957630</td>\n",
       "      <td>5806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A3</th>\n",
       "      <td>245</td>\n",
       "      <td>5378</td>\n",
       "      <td>0.956429</td>\n",
       "      <td>5623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A4</th>\n",
       "      <td>510</td>\n",
       "      <td>8099</td>\n",
       "      <td>0.940760</td>\n",
       "      <td>8609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A5</th>\n",
       "      <td>833</td>\n",
       "      <td>9712</td>\n",
       "      <td>0.921005</td>\n",
       "      <td>10545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B1</th>\n",
       "      <td>850</td>\n",
       "      <td>7981</td>\n",
       "      <td>0.903748</td>\n",
       "      <td>8831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B2</th>\n",
       "      <td>1011</td>\n",
       "      <td>8571</td>\n",
       "      <td>0.894490</td>\n",
       "      <td>9582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B3</th>\n",
       "      <td>1271</td>\n",
       "      <td>9144</td>\n",
       "      <td>0.877964</td>\n",
       "      <td>10415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B4</th>\n",
       "      <td>1465</td>\n",
       "      <td>9369</td>\n",
       "      <td>0.864778</td>\n",
       "      <td>10834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B5</th>\n",
       "      <td>1608</td>\n",
       "      <td>9284</td>\n",
       "      <td>0.852369</td>\n",
       "      <td>10892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C1</th>\n",
       "      <td>1941</td>\n",
       "      <td>9472</td>\n",
       "      <td>0.829931</td>\n",
       "      <td>11413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C2</th>\n",
       "      <td>2207</td>\n",
       "      <td>9175</td>\n",
       "      <td>0.806097</td>\n",
       "      <td>11382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C3</th>\n",
       "      <td>2213</td>\n",
       "      <td>8375</td>\n",
       "      <td>0.790990</td>\n",
       "      <td>10588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C4</th>\n",
       "      <td>2368</td>\n",
       "      <td>7760</td>\n",
       "      <td>0.766193</td>\n",
       "      <td>10128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C5</th>\n",
       "      <td>2107</td>\n",
       "      <td>6659</td>\n",
       "      <td>0.759640</td>\n",
       "      <td>8766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D1</th>\n",
       "      <td>2099</td>\n",
       "      <td>5807</td>\n",
       "      <td>0.734505</td>\n",
       "      <td>7906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D2</th>\n",
       "      <td>1945</td>\n",
       "      <td>4688</td>\n",
       "      <td>0.706769</td>\n",
       "      <td>6633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D3</th>\n",
       "      <td>1735</td>\n",
       "      <td>4282</td>\n",
       "      <td>0.711650</td>\n",
       "      <td>6017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D4</th>\n",
       "      <td>1773</td>\n",
       "      <td>3820</td>\n",
       "      <td>0.682997</td>\n",
       "      <td>5593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D5</th>\n",
       "      <td>1552</td>\n",
       "      <td>3061</td>\n",
       "      <td>0.663560</td>\n",
       "      <td>4613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E1</th>\n",
       "      <td>1476</td>\n",
       "      <td>2601</td>\n",
       "      <td>0.637969</td>\n",
       "      <td>4077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E2</th>\n",
       "      <td>1363</td>\n",
       "      <td>2175</td>\n",
       "      <td>0.614754</td>\n",
       "      <td>3538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E3</th>\n",
       "      <td>1171</td>\n",
       "      <td>1748</td>\n",
       "      <td>0.598835</td>\n",
       "      <td>2919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E4</th>\n",
       "      <td>951</td>\n",
       "      <td>1391</td>\n",
       "      <td>0.593937</td>\n",
       "      <td>2342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E5</th>\n",
       "      <td>870</td>\n",
       "      <td>1156</td>\n",
       "      <td>0.570582</td>\n",
       "      <td>2026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F1</th>\n",
       "      <td>630</td>\n",
       "      <td>841</td>\n",
       "      <td>0.571720</td>\n",
       "      <td>1471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F2</th>\n",
       "      <td>438</td>\n",
       "      <td>570</td>\n",
       "      <td>0.565476</td>\n",
       "      <td>1008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F3</th>\n",
       "      <td>416</td>\n",
       "      <td>497</td>\n",
       "      <td>0.544359</td>\n",
       "      <td>913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F4</th>\n",
       "      <td>347</td>\n",
       "      <td>372</td>\n",
       "      <td>0.517385</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F5</th>\n",
       "      <td>249</td>\n",
       "      <td>296</td>\n",
       "      <td>0.543119</td>\n",
       "      <td>545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G1</th>\n",
       "      <td>219</td>\n",
       "      <td>211</td>\n",
       "      <td>0.490698</td>\n",
       "      <td>430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G2</th>\n",
       "      <td>163</td>\n",
       "      <td>168</td>\n",
       "      <td>0.507553</td>\n",
       "      <td>331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G3</th>\n",
       "      <td>114</td>\n",
       "      <td>127</td>\n",
       "      <td>0.526971</td>\n",
       "      <td>241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G4</th>\n",
       "      <td>93</td>\n",
       "      <td>78</td>\n",
       "      <td>0.456140</td>\n",
       "      <td>171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G5</th>\n",
       "      <td>85</td>\n",
       "      <td>60</td>\n",
       "      <td>0.413793</td>\n",
       "      <td>145</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              0     1   success  total\n",
       "sub_grade                             \n",
       "A1          135  5100  0.974212   5235\n",
       "A2          246  5560  0.957630   5806\n",
       "A3          245  5378  0.956429   5623\n",
       "A4          510  8099  0.940760   8609\n",
       "A5          833  9712  0.921005  10545\n",
       "B1          850  7981  0.903748   8831\n",
       "B2         1011  8571  0.894490   9582\n",
       "B3         1271  9144  0.877964  10415\n",
       "B4         1465  9369  0.864778  10834\n",
       "B5         1608  9284  0.852369  10892\n",
       "C1         1941  9472  0.829931  11413\n",
       "C2         2207  9175  0.806097  11382\n",
       "C3         2213  8375  0.790990  10588\n",
       "C4         2368  7760  0.766193  10128\n",
       "C5         2107  6659  0.759640   8766\n",
       "D1         2099  5807  0.734505   7906\n",
       "D2         1945  4688  0.706769   6633\n",
       "D3         1735  4282  0.711650   6017\n",
       "D4         1773  3820  0.682997   5593\n",
       "D5         1552  3061  0.663560   4613\n",
       "E1         1476  2601  0.637969   4077\n",
       "E2         1363  2175  0.614754   3538\n",
       "E3         1171  1748  0.598835   2919\n",
       "E4          951  1391  0.593937   2342\n",
       "E5          870  1156  0.570582   2026\n",
       "F1          630   841  0.571720   1471\n",
       "F2          438   570  0.565476   1008\n",
       "F3          416   497  0.544359    913\n",
       "F4          347   372  0.517385    719\n",
       "F5          249   296  0.543119    545\n",
       "G1          219   211  0.490698    430\n",
       "G2          163   168  0.507553    331\n",
       "G3          114   127  0.526971    241\n",
       "G4           93    78  0.456140    171\n",
       "G5           85    60  0.413793    145"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "subgrade_dat = loan_dat.groupby('sub_grade')['loan_status'].agg({'0': lambda x: x.count()-x.sum(), '1': 'sum', 'success': lambda x: x.sum()/x.count(), 'total': 'count'})\n",
    "display(subgrade_dat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_vals = np.arange(1, 1+len(grade_dat.index))\n",
    "w=0.4\n",
    "with sns.axes_style(\"white\"):\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(12, 6))\n",
    "    ax.bar(x_vals, grade_dat['0'], width=w, color = 'k', label = '0', tick_label=list(grade_dat.index))\n",
    "    ax.bar(x_vals+w, grade_dat['1'], width=w, color = 'r', label = '1')\n",
    "    ax.set_xlabel('Grade', fontsize=14)\n",
    "    ax.set_ylabel('Count', fontsize=14)\n",
    "    ax.set_title('Loan Status of Various Grades', fontsize=14)\n",
    "    ax.legend()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_vals = np.arange(1, 1+len(grade_dat.index))\n",
    "w=0.4\n",
    "with sns.axes_style(\"white\"):\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(12, 6))\n",
    "    ax.bar(x_vals, grade_dat['success'], width=w, color = 'b', label = '0', tick_label=list(grade_dat.index))\n",
    "    ax.set_xlabel('Grade', fontsize=14)\n",
    "    ax.set_ylabel('Percentage', fontsize=14)\n",
    "    ax.set_title('Percentage of Successful Loan Status by Grade', fontsize=14)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_vals = np.arange(1, 1+len(subgrade_dat.index))\n",
    "w = 0.4\n",
    "with sns.axes_style(\"white\"):\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(18, 6))\n",
    "    ax.bar(x_vals, subgrade_dat['0'], width=w, color = 'k', label = '0', tick_label=list(subgrade_dat.index))\n",
    "    ax.bar(x_vals+w, subgrade_dat['1'], width=w, color = 'r', label = '1')\n",
    "    ax.set_xlabel('Sub-rade', fontsize=14)\n",
    "    ax.set_ylabel('Count', fontsize=14)\n",
    "    ax.set_title('Loan Status of Various Sub-grades', fontsize=14)\n",
    "    ax.legend()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABCcAAAGICAYAAAByR4o4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAIABJREFUeJzs3Xd4VFX+x/HPkGJCkZ4EEEIWAkIKxCUUQTDBGEhglyagFF1AkBUsoHSpMUFcaTZ6UZQFBCwURfH3AxSkyELAWIAlSkukWUJIv78/eJgfY+rgzFwS3q/n4Xm8d87c8713LiP55NxzLIZhGAIAAAAAADBJObMLAAAAAAAAtzfCCQAAAAAAYCrCCQAAAAAAYCrCCQAAAAAAYCrCCQAAAAAAYCrCCQAAAAAAYCrCCQAA7HTixAn16dNHISEhioyMNLsc09zsdWjcuLE+/vhjJ1aGotzK1//VV19Vly5dzC6jWEuXLr2t/+4DgDMQTgBAKTdu3Dg1btxYjRs3VlBQkDp27KiXXnpJ6enpZpdWIgMGDND06dPNLsMu8+bNk5eXl7Zu3ar33nuvwDZXr17V7NmzFRUVpZCQELVq1Up9+/bVpk2bXFyt85TkOtyMW/kH1HXr1qlbt24KCwvTX//6V3Xt2lVz5syxvn6ztW/YsEFhYWGOLNXlirs2AAAUxd3sAgAAf969996rWbNmKScnRwcOHNCkSZOUnp6uadOm3dTxsrKy5Onp6eAqy44ff/xRHTt21F133VVomylTpujgwYOaOHGiAgMD9euvv+rw4cP69ddfXVipc5XkOpQl7733nuLi4jR+/Hi1adNG2dnZOnbsmA4dOmR2aaYrjdeG7zkAuLUwcgIAygBPT0/VrFlTtWrVUteuXdW1a1dt377d+vrx48c1dOhQhYWFqU2bNho1apTOnz9vfX3cuHEaNmyYFi1apPbt26tDhw6Srv3jffbs2YqIiFBwcLA6duyot956y+7jrly5Uvfdd5/Cw8M1fvx4Xb161fr6vn379M4771hHf5w+fVq5ubmaMGGCIiMjFRoaqgcffFCLFy9WXl6e9dg5OTmKj49XeHi4wsPDFR8frylTpmjAgAHWNoZhaPHixXrggQcUGhqqrl276oMPPijyWubl5en1119Xhw4dFBwcrK5du+qzzz6zvt64cWN99913ev3119W4cWO9+uqrBR7n888/17BhwxQREaG77rpLQUFBeuSRR9SvXz9rm4JGjVy/Zjeew7Jly/Tggw8qODhY7du31yuvvGJ9PTU1VaNHj1arVq3UrFkz/f3vf9dXX31lU0ePHj2sj17MmTNHWVlZ1te3bdumrl27KjQ0VC1btlT//v114cIFSdK5c+c0fPhwtWzZUs2aNVOnTp20efPmQq/D6dOn1bhxYx05csTmnBz9GMGvv/6qsWPHKjw8XKGhoXrsscd07Ngx6+uXL1/WqFGj1L59e4WGhio2Nlbr16+3OcaAAQM0depUzZ49W61atVKbNm300ksv2dxjf/T5558rKipKffv2lb+/vxo2bKjOnTtr/Pjxkq6Nfnjttdd07Ngx6/28YcMGSdLy5cvVtWtXNW/eXPfdd58mTpyo3377TZK0d+9ejR8/Xunp6db3Xb+vIiMjtXTp0ny133jfFPUZFubChQsaOnSomjVrpoiICJu/FwMHDsx3X6alpalZs2batm3bTV0bqeBRJYWNGFm3bp3uv/9+hYaG6p///KcuXbpU5Pmkp6drzJgxCgsL07333quFCxdq2LBhGjdunLVNZGSkXn31VY0fP14tWrTQc889J0n617/+pejoaIWGhioyMlKzZs1SZmamzfEXL16stm3bKiwsTGPGjClwZNr69esVExOjkJAQRUdHa8WKFUXeTwAAW4ycAIAyyMvLS9nZ2ZKkn3/+Wf369VOvXr00duxYZWdna+7cuRo+fLjWrl2rcuWu5dT79u1TxYoVtWTJEhmGIenaD8oHDhzQxIkT1bRpU505c0YpKSl2HffAgQOqWbOmVqxYoXPnzumZZ55R/fr1NWzYME2cOFHJyckKCAjQqFGjJEnVqlVTXl6efH19NXfuXFWrVk2JiYmaPHmyqlSpooceekiStGzZMm3cuFFxcXEKDAzUu+++q02bNqlp06bW6zB37lx9/PHHmjx5sgICAnTo0CG98MILqly5su6///4Cr91bb72lpUuXatq0aQoODtaHH36okSNHasOGDWrSpIm++OILDRgwQBERERo0aJDKly9f4HFq1KihXbt2qVOnTqpUqdJNf5azZ8/W6tWrNW7cOIWHh+vSpUtKSkqSdO0HsgEDBqhatWp67bXX5Ovrq++++8763l27dum5557TxIkTFR4errNnz2rKlCnKysrS2LFjdf78eY0aNUqjRo3Sgw8+qPT0dB0+fNj6/mnTpikzM1NvvfWWKlSooJMnT1pfK+g6XL58+abP0x7jxo3TyZMn9cYbb+jOO+/UnDlzNGTIEH3yySfy8vJSVlaWmjZtqscff1wVK1bU7t27NWXKFNWuXVtt2rSxHuejjz7SwIED9e9//1vffvutnnvuOQUFBRX6WEaNGjW0d+9enTp1SnXr1s33ekxMjI4dO6b/+Z//0dtvvy1J1s/eYrFowoQJqlu3rs6ePasZM2ZoxowZevnllxUWFqYJEyZozpw5+vTTTyWp0Pvqj4r7DAvz6quv6tlnn9X48eP18ccfa+zYsfrLX/6ikJAQ9e7dW9OnT9e4ceOsIws2bdqk8uXLKyIi4qaujT3OnDmjDz/8UG+88YauXr2qyZMna8KECVqwYEGh75k5c6b279+v1157TT4+PnrjjTd04MABRUVF2bRbvny5hg8frvXr11u/57y9vRUfHy9fX1+dOHFCU6ZMkaenp5555hlJ0pYtWzRv3jxNmjRJrVq10scff6zFixerSpUq1uOuXbtW8+fP16RJkxQUFKRjx47phRdekLu7u/r37/+nrgcA3DYMAECpNnbsWGPo0KHW7cOHDxstW7Y0nn76acMwDGPu3LnGwIEDbd7zyy+/GI0aNTIOHz5sPUarVq2MzMxMa5uTJ08ajRo1Mnbs2FFgvyU9bvv27Y3s7Gxrm4kTJxqPPvqodbt///7GtGnTij3Pl19+2eZ9bdu2NRYuXGjdzsvLM6Kjo43+/fsbhmEYV65cMUJCQoz9+/fbHCcuLs4YMmRIof20a9fOePXVV2329e/f3xg9erR1OzY21pg/f36R9e7bt89o37690bRpU6Nbt27GtGnTjC+++CLfcf947jd+nmlpaUZwcLDx7rvvFtjHmjVrjObNmxsXL14s8PVHHnnEeO2112z2ffrpp0bz5s2NvLw84+jRo0ajRo2M06dPF/j+Ll265LsWN/rjdTh16pTRqFEjIzEx0aZdo0aNjK1btxa6/Ufz5883YmNjC3zt+n25b98+677ffvvNuOeee4y1a9cWesxnnnnGmDBhgnW7f//+Ru/evW3aPPbYYzZt/ig1NdXo3bu30ahRIyMqKsoYPXq0sXHjRiMrK6tEtd9ox44dRlBQkJGbm2sYhmGsX7/eaN68eb52ERERxpIlS2z23XjfFPcZFqRRo0bGxIkTbfY9+uij1ns8MzPTaNmypbFp0ybr67169TJmzpxZ6DFv9tr88bznz59v3H333caZM2es+/bv3280atTIOHnyZIF9p6WlGUFBQTb1XrlyxWjRooUxduxY676IiAhj2LBhhZ7Dde+++67xwAMPWLf79OlT4PWKiIiwbnfo0MHYuHGjTZvly5cbnTt3LrY/AMA1jJwAgDJg165dCgsLU05OjnJyctSxY0e98MILkqRvvvlGBw4cKHDo9E8//aTQ0FBJUmBgoM3z10lJSSpXrpxat25dYJ8lPW7Dhg3l7v7//7vx8fEp0W92V69erXXr1uns2bPKzMxUdna26tSpI0n6/fffdf78eYWEhFjbWywWhYSEWEd2HD9+XJmZmRoyZIgsFou13Y3H+aO0tDT9/PPP+utf/2qz/5577tHOnTuLrflG4eHh+uyzz3T48GEdPHhQX331lQYNGqQ+ffqUeALQEydOKCsry+a3/TdKSkpS48aNVa1atQJf/+abb5SYmKglS5ZY9+Xl5SkjI0Pnz5/X3XffrXvvvVddunRRu3bt1KZNG3Xq1Ml6vIEDB2rq1KnatWuXWrduraioKAUHB9t1HRztxIkTKleunJo3b27dV6lSJTVq1EjHjx+XJOXm5mrRokXasmWLfv75Z2VlZSk7O1stW7a0OVbjxo1ttn18fHTx4sVC+/bx8dGaNWv0ww8/aP/+/Tp48KAmT56sFStWaPXq1fL29i70vXv27NGiRYt04sQJ/f7778rLy1N2drbOnz8vX1/fm7kUklTsZ1iYG6/f9e0dO3ZIuvaY2N///netX79esbGxOn78uBITE5WQkFDo8f7MtfkjX19f1a5d27rdrFkzlStXTidOnNCFCxf0+OOPW1+bNm2aGjVqpOzsbOt3jnRt5ElgYGC+Yxd0/3788cdauXKlfvrpJ6Wnpys3N9fmcYwTJ06oV69eNu9p3ry5fvrpJ0nSpUuXdO7cOU2ZMsVmnp+cnBzr6AwAQPEIJwCgDGjRooVmzJghd3d3+fj4yMPDw/paXl6eOnTooLFjx+Z7X/Xq1a3/XdJh5PYe98ZgQroWIhT3D/YtW7YoPj5eY8eOVVhYmCpWrKh33nnHZu6H68cqzPU+3nzzTZsfdAqqqSSK6qswHh4eatGihVq0aKGhQ4fqjTfe0Lx58zR06FDdddddBV6L64/j3HgOhSnu9by8PI0YMUKdOnXK91q1atXk5uamZcuW6dChQ/ryyy/13nvvafbs2Vq1apXuvvtuPfTQQ7rvvvu0Y8cO7d69W3379tWwYcM0cuTIAvu7/ijPjXXdeD6OUNQ5X/+Mli5dquXLl2vChAlq3Lixypcvr9mzZ+ebt+Bm7k1JatSokRo1aqR+/frpwIED6tevn7Zu3aoePXoU2P7MmTMaNmyYevfuraeeekpVqlRRUlKSRo0aVez1Ke4eKe4zvFkPPfSQ/va3v+ns2bN67733FBYWpoYNGxb7vqKuTUHnkpOTY1ddwcHBev/9963b1atX16lTp0r8/j+GJIcOHdKoUaP05JNP6r777tOdd96pzz//XC+99FKJj3k9yJg2bVqpX3EFAMzEhJgAUAZ4e3vL399fderUsQkmJCkoKEjHjx9X7dq15e/vb/OnYsWKhR6zadOmysvLs5lc0RHH/SMPDw/l5uba7Pv666/VrFkz9e/fX0FBQfL397f+llK69pvymjVrKjEx0brPMAybiRgbNGggT09PnT17Nl99hY2cqFixonx8fPT111/b7D948KAaNGhQ4nMqzPUf7q5PpletWjWbCUQl6fvvv893Dnv27CnweEFBQfr+++8LnSywadOm+u9//5vv/P39/a0/mFssFoWFhWnEiBFav369fHx8tGXLFusx/Pz81KdPH82bN09PPfWU1qxZU+j5Xf9t/Y3n9O233xba/mY0bNhQeXl5NqtApKWl6YcffrB+RgcPHlRERIS6deumJk2aqF69ekpOTnZoHTfWI/3/Z1rQ/Xz06FFlZ2dr/PjxCgsLU0BAgH7++WebNgW9T8p/j2RmZtrM/SEV/xkW5I+jlw4fPqy//OUv1u3AwEA1a9ZMa9eu1YcffqiePXsWebyCFHS/X7hwwSagKOj+SE1N1blz56zbiYmJysvLU4MGDeTl5ZXvu6ZevXry8PCw+ft/9epVm0lSC3Pw4EH5+vrqySefVGhoqOrXr6+zZ8/atGnQoEGB1+u6GjVqyNfXVz/99FOBf9cAACXDyAkAKOMeeeQRrV27Vs8++6wef/xxVatWTadOndLWrVs1duzYQoOE+vXrq3Pnzpo0aZJ1QszU1FSdPn1a3bp1u+nj/lGdOnV05MgRnT59WuXLl1eVKlVUv359bdiwQTt27JC/v782b96s/fv3q3Llytb3DRw4UEuXLlVAQIAaNGigNWvW6Pz586pZs6aka0HDoEGDNGvWLBmGofDwcKWnp+vQoUMqV66c+vTpU2A9gwcP1vz581W/fn0FBQXpww8/1IEDB6yrLpTUgAEDFBsbq+DgYFWpUkUnTpzQ7NmzrfVKUuvWrRUfH6/t27crICBAa9as0blz56zhScWKFTVw4EDNnj1bnp6eCg8P1y+//KKjR4/qkUceUZcuXbRo0SI9+eSTGj16tHx9ffXDDz+oQoUKat26tZ588kk98cQTql27tjp37iw3NzcdO3ZMiYmJGjNmjA4dOqTdu3erXbt2qlGjhpKSknTu3DlrfXFxcWrfvr0CAgKUlpamXbt2Ffnbcy8vLzVv3lyLFy9WvXr19Pvvv2v27Nl2XbfrMjMz8/3g6uXlpYCAAHXs2FGTJ0/WjBkzVKlSJc2ZM0cVK1ZU165dJV27d7ds2aIDBw6oatWqWrVqlU6fPm0zWerNmDJlinx8fNS6dWv5+fnp/PnzevPNN+Xt7a22bdtKunY/nz17Vt98841q1aqlihUryt/fX3l5eVq5cqWioqJ0+PBhrVy50ubYderUUWZmpr788ks1adJE3t7e8vb2VuvWrbV+/XpFRkaqWrVqWrBggc3IieI+w8Js27ZNISEhatmypT755BPt2bNHa9eutWnz0EMPacqUKfLw8FDnzp3/9LVp1aqVfv31Vy1YsECxsbHau3evPvnkk3zH8vLy0tixYzV+/HhlZGRo6tSpuv/++1W/fv0C+65QoYJ69Oihf/3rX6patapq1qypN998U3l5ecWOeKpfv75SU1P14YcfKiwsTLt27dKmTZts2gwcOFBjxoyxuV6HDx+2mRBz5MiRmjFjhu688061b99eOTk5SkpKUmpqqs3qOwCAwhFOAEAZ5+vrq9WrV2v27NkaMmSIMjMzVatWLbVr185mjomCzJo1S3PnzlVcXJwuX74sPz8/PfbYY3/6uDcaNGiQxo0bp9jYWGVkZGj79u3q06ePdfUEwzD04IMP6h//+IdNQDBo0CCdP39e48ePl8ViUY8ePRQVFWWzhOIzzzyjGjVqaNmyZZo6daoqVqyoJk2aaMiQIYXWM3DgQF25ckUvv/yyLl68qICAAL366qtq0qRJic9Jktq1a6cPPvhAc+bMUXp6umrWrKl7771XTz75pNzc3CRJPXv21Pfff68JEyZIuhYkRUVF2ax6MXr0aFWuXFlvvPGGUlNTVb16dXXr1k3StUdxVq1apZkzZ+qJJ55Qdna2AgICrMs33nfffVq4cKHeeOMNLVu2TG5ubqpfv7718YNKlSrp4MGDWrVqlX777TfVqlVL//znP/X3v/9d0rXRKHFxcTp37pwqVKigNm3a2CzNWJD4+HhNnDhRvXr1Ur169TRlyhSb5VNL6qeffrKe53VBQUHasGGDEhISFB8fr+HDhyszM1P33HOPlixZIi8vL0nS8OHDdfr0aT3++OPy8vJS9+7d1bVrV504ccLuOm7Utm1brV+/Xv/+9791+fJlValSRUFBQVq2bJkCAgIkSdHR0fr000/12GOP6bffflNCQoJ69OihiRMnavHixZo7d651Ocpnn33Weux77rlHffv21ahRo/TLL79oxIgRGjlypIYNG6YzZ87on//8p8qXL68nnnjCZtRFcZ9hYUaOHKlPPvlEcXFxqlatmhISEmzmbJCurT4SFxenTp06FRs2luTaNGjQQFOnTtXChQu1cOFCRUREaNiwYZo7d67NserUqaPY2Fg98cQTunz5stq2basXX3yxyP7Hjh2rq1evavjw4Spfvrwee+wxXbhwodjvosjISA0ePFjx8fHKzMxU27Zt9dRTT9nMHRETE6NTp05pzpw5ysjIUGRkpP7xj39o48aN1jYPPfSQvL29tXTpUr3yyivy8vJSw4YNWakDAOxgMZipBwBQRnTv3l333HOPdTJQADcvNTVVERERevvtt/NNEnury8rKUkREhAYPHqxBgwaZXQ4AoAQYOQEAKJXOnDmjL774QuHh4crNzdWaNWv03XfflXglDAAFu76KyJw5c9SkSZNSEUwkJSXpxIkTCg0N1ZUrV7R48WJduXJFMTExZpcGACghwgkAQKlUrlw5vf/++5o1a5by8vLUsGFDLV682GZ5UQD2O3jwoAYOHKj69evne+TiVrZ8+XKdPHlS7u7uuvvuu7Vq1Sr5+fmZXRYAoIR4rAMAAAAAAJiKpUQBAAAAAICpCCcAAAAAAICpSv2cE61atbKuBw8AAAAAAG4NZ86c0d69e0vUttSHE3Xq1LFZ9x4AAAAAAJivR48eJW7LYx0AAAAAAMBUhBMAAAAAAMBULgsnxo8frzZt2qhLly4F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\n",
      "text/plain": [
       "<Figure size 1296x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_vals = np.arange(1, 1+len(subgrade_dat.index))\n",
    "w=0.4\n",
    "with sns.axes_style(\"white\"):\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(18, 6))\n",
    "    ax.bar(x_vals, subgrade_dat['success'], width=w, color = 'b', label = '0', tick_label=list(subgrade_dat.index))\n",
    "    ax.set_xlabel('Sub-grade', fontsize=14)\n",
    "    ax.set_ylabel('Percentage', fontsize=14)\n",
    "    ax.set_title('Percentage of Successful Loan Status by Sub-grade', fontsize=14)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_vals = np.arange(1, 1+len(subgrade_dat.index))\n",
    "w = 0.4\n",
    "with sns.axes_style(\"white\"):\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(18, 6))\n",
    "    ax.bar(x_vals, subgrade_dat['0'], width=w, color = 'k', label = '0', tick_label=list(subgrade_dat.index))\n",
    "    ax.bar(x_vals+w, subgrade_dat['1'], width=w, color = 'r', label = '1')\n",
    "    ax.set_xlabel('Grade', fontsize=14)\n",
    "    ax.set_ylabel('Number', fontsize=14)\n",
    "    ax.set_title('Loan Status of Various Grades', fontsize=14)\n",
    "    ax.legend()\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the distribution of the counts of loan status counts - 0 or 1 - on grades and subgrades, we see that the loan statuses encoded as 0 appear to be closely distributed as normal, whereas the loan statuses of 1 are right skewed. This tells us that the number of successfull loans decreases as the grade of the loan decreases - worsens - whereas the number of failed loans seams to be increase up to point and fall off. The rise in failed loans is natural and intuitive; as the grade worsens, the number of failed loans increases, whereas the fail may be unintutive. The falloff is explained in the sense of information symmetry. Loans of poor grade are known to be risky, so fewer loans are made overall, and because the loans are poor, default continues to occur as predicted. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1.4 (a) Create a plot showing average debt to income ratio vs. grade**\n",
    "\n",
    "**(b) Create a plot showing number of loans vs. loan purpose.**\n",
    "\n",
    "**(c) Create a plot showing average interest rate vs grade. Interpret your plots.** \n",
    "\n",
    "*Hint: Look up the data dictionary*\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "avg_dti_group = loan_dat.groupby('grade')['dti'].mean()\n",
    "x_vals = np.arange(1, 1+len(grade_dat.index))\n",
    "w = 0.4\n",
    "with sns.axes_style(\"white\"):\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(12, 6))\n",
    "    ax.bar(x_vals, avg_dti_group, width=w, color = 'k', tick_label=list(grade_dat.index))\n",
    "    ax.set_xlabel('Grade', fontsize=14)\n",
    "    ax.set_ylabel('Average DTI', fontsize=14)\n",
    "    ax.set_title('Average DTI vs Grade', fontsize=14)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "car                     1539\n",
       "credit_card            42850\n",
       "debt_consolidation    117330\n",
       "home_improvement        9846\n",
       "house                    645\n",
       "major_purchase          3159\n",
       "medical                 1827\n",
       "moving                  1210\n",
       "other                   8993\n",
       "renewable_energy         123\n",
       "small_business          1736\n",
       "vacation                1023\n",
       "wedding                    6\n",
       "dtype: int64"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "purpose = ['car', 'credit_card', 'debt_consolidation', 'home_improvement', 'house', 'major_purchase', 'medical',\n",
    "          'moving', 'other', 'renewable_energy', 'small_business', 'vacation', 'wedding']\n",
    "loan_purp = loan_dat.loc[:, purpose].apply(sum)\n",
    "loan_purp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_vals = np.arange(1, 1+len(loan_purp))\n",
    "w = 0.6\n",
    "with sns.axes_style(\"white\"):\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(18, 6))\n",
    "    ax.bar(x_vals, loan_purp, width=w, color = 'k')\n",
    "    ax.set_xlabel('Grade', fontsize=14)\n",
    "    ax.set_ylabel('Count', fontsize=14)\n",
    "    ax.set_title('Loan Purpose vs Grade', fontsize=14)   \n",
    "    ax.set_xticks(x_vals)\n",
    "    ax.set_xticklabels(list(loan_purp.index.values), rotation='vertical')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "loan_dat['int_rate']= loan_dat['int_rate'].apply(lambda x: float(re.findall('([0-9]*.[0-9]*)%', x)[0]))\n",
    "avg_ir_group = loan_dat.groupby('grade')['int_rate'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_vals = np.arange(1, 1+len(grade_dat.index))\n",
    "w = 0.4\n",
    "with sns.axes_style(\"white\"):\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(12, 6))\n",
    "    ax.bar(x_vals, avg_ir_group, width=w, color = 'k', tick_label=list(grade_dat.index))\n",
    "    ax.set_xlabel('Grade', fontsize=14)\n",
    "    ax.set_ylabel('Average Interest Rate', fontsize=14)\n",
    "    ax.set_title('Average Interest Rate vs Grade', fontsize=14)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1.5 (a) Check if all categorical columns identified in 1.1 are actually categorical. If not, make necessary changes.**\n",
    "\n",
    "**(b) Convert to numeric `grade` and `sub_grade`.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "loan_dat.grade = loan_dat.grade.astype('category')\n",
    "loan_dat.sub_grade = loan_dat.sub_grade.astype('category')\n",
    "loan_dat.addr_state = loan_dat.addr_state.astype('category')\n",
    "loan_dat.zip_code = loan_dat.zip_code.astype('category')\n",
    "loan_dat.title = loan_dat.title.astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "loan = pd.get_dummies(loan_dat, drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(190287, 199)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1.6 Split the dataset into X_train, y_train, X_test, y_test, ratio 80:20, random_state = 109, stratify on `loan_status`.**\n",
    "\n",
    "**Why do we want to strafity? Explain the choice of `loan status` and if you choose a different variable.**\n",
    "\n",
    "**Check the ratio for y_train and y_test**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = loan.loan_status\n",
    "X = loan.drop('loan_status', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8072443489742428\n",
      "0.806716064953492\n"
     ]
    }
   ],
   "source": [
    "print(sum(y_train == 1)/y_train.shape[0])\n",
    "print(sum(y_test == 1)/y_test.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 2: Building Models. We will be using log_loss as evaluation metric.\n",
    "\n",
    "**2.1 Explain the difference between accuracy and log loss. (No code needed)**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Accuracy measures correctness of prediction based on whether the predicted class matches the true class. Log loss provides a measure of accuracy based on uncertainity of measurement i.e. based on the probability. Log loss is useful loss function to use when using gradient descent to optimize. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "**2.2 Fit a Linear Regression model on training data. Report log loss on `X_test`. What problems do you see in using Linear Regression for this problem ?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/preprocessing/data.py:625: DataConversionWarning: Data with input dtype uint8, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  return self.partial_fit(X, y)\n",
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: DataConversionWarning: Data with input dtype uint8, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "scaler = StandardScaler().fit(X_train)\n",
    "X_train = scaler.transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "lin_reg = sklearn.linear_model.LinearRegression().fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: DataConversionWarning: Data with input dtype uint8, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "lin_reg_pred = lin_reg.predict(scaler.transform(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "lin_reg_pred_class = lin_reg_pred < 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1911818802879815\n",
      "0.4744768485572718\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test, lin_reg_pred_class))\n",
    "lin_reg_log_loss = log_loss(y_test, lin_reg_pred)\n",
    "print(lin_reg_log_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Problems occur in that linear regression does not limit the range of output in this scenario to between 0 and 1. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2.3 Fit a Logisitc Regression model. Choose appropriate value of C. Set random_state=109. Report log loss on `X_test`.**\n",
    "\n",
    "**Hints:**  <br/>\n",
    "*You may set max_iter=1000* <br/>\n",
    "*You may set solver = 'liblinear' to avoid warnings.* "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: DataConversionWarning: Data with input dtype uint8, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "log_reg = LogisticRegression(max_iter=1000, random_state=109).fit(X_train, y_train)\n",
    "log_reg_pred = log_reg.predict(scaler.transform(X_test))\n",
    "log_reg_pred_prob = log_reg.predict_proba(scaler.transform(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8087918440275369\n",
      "0.4401935670516152\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test, log_reg_pred))\n",
    "log_reg_log_loss = log_loss(y_test, log_reg_pred_prob)\n",
    "print(lin_reg_log_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2.4 Fit a regularized model using `LogisticRegression()`. Set penalty = l2, random_state = 109.** \n",
    "\n",
    "**Report logloss on X_test.**\n",
    "\n",
    "**Should you standardize your data before fitting regularized model ? Y/N and explain why.** \n",
    "\n",
    "**Hints:** <br/>\n",
    "*You may set max_iter = 1000, C = 0.11*\n",
    "<br/>\n",
    "*You may set solver='liblinear' to avoid warnings.*\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: DataConversionWarning: Data with input dtype uint8, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  \n",
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:3: DataConversionWarning: Data with input dtype uint8, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "log_reg = LogisticRegression(max_iter=1000, random_state=109, C=0.5).fit(X_train, y_train)\n",
    "log_reg_pred = log_reg.predict(scaler.transform(X_test))\n",
    "log_reg_pred_prob = log_reg.predict_proba(scaler.transform(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8087918440275369\n",
      "0.4401935670516152\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test, log_reg_pred))\n",
    "log_reg_reg_log_loss = log_loss(y_test, log_reg_pred_prob)\n",
    "print(log_reg_reg_log_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2.5 (a) Create Bagging Classifier and Random Forest Model.**\n",
    "*For bagging classifier set n_estimators = 100 and random_state = 109*\n",
    "*For Random Forest set n_estimators = 500 and random_state = 109.*\n",
    "**Report logloss on X_test.**\n",
    "\n",
    "**(b) Explain the difference between Bagging and Random Forest. (No code)**\n",
    "\n",
    "**Hints:**\n",
    "<br/>\n",
    "*It took ~12 mins on a 16GB, quad core, old macbook to run Bagging Classifier.* <br/>\n",
    "*It took ~6 mins on a 16GB, quad core, old macbook to run RandomForest Classifier.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "bag_classifier = BaggingClassifier(n_estimators=100, random_state=109).fit(X_train, y_train)\n",
    "rf_class = RandomForestClassifier(n_estimators=500, random_state=109).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: DataConversionWarning: Data with input dtype uint8, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: DataConversionWarning: Data with input dtype uint8, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "bag_log_loss = log_loss(y_test, bag_classifier.predict_proba(scaler.transform(X_test)))\n",
    "rf_log_loss = log_loss(y_test, rf_class.predict_proba(scaler.transform(X_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: DataConversionWarning: Data with input dtype uint8, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8065058594776394\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: DataConversionWarning: Data with input dtype uint8, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8086079142361658\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test, bag_classifier.predict(scaler.transform(X_test))))\n",
    "print(accuracy_score(y_test, rf_class.predict(scaler.transform(X_test))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.47198888949039997\n",
      "0.4442404898200625\n"
     ]
    }
   ],
   "source": [
    "print(bag_log_loss)\n",
    "print(rf_log_loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bagging uses accumlation of low bias models to reduce variance. Random forrests take the extra step of reducing variance by selecting a subset of predictors at each step in the tree. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2.6 Create a NN Model. You may use following hints as starting point. Then change some of the hyperparameters and report your findings.** <br/>\n",
    "**Should you standardize your data before fitting NN model ? Y/N and explain.**\n",
    "\n",
    "Hints:\n",
    "\n",
    "Nodes per Layer: 40, 30, 25, 20, 15, 10, 5, 1 [Total 7 layers + last layer] <br/> \n",
    "Activation function: reLU <br/>\n",
    "Optimizer: Nadam (use the defaults; no other tuning) <br/>\n",
    "Epochs: No more than 50 <br/>\n",
    "Batch size: 256 <br/>\n",
    "Validation_data = Same as previous models <br/>\n",
    "<br/>\n",
    "Choose appropriate loss function and activation function for last layer. <br/>\n",
    "\n",
    "You may regularize, kernel_initializer = 'glorot_uniform' and/or Early stopping  and/or by adding dropout of 0.2 before the final layer. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_train = to_categorical(y_train)\n",
    "Y_test = to_categorical(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_33 (Dense)             (None, 40)                7960      \n",
      "_________________________________________________________________\n",
      "dense_34 (Dense)             (None, 30)                1230      \n",
      "_________________________________________________________________\n",
      "dense_35 (Dense)             (None, 25)                775       \n",
      "_________________________________________________________________\n",
      "dense_36 (Dense)             (None, 20)                520       \n",
      "_________________________________________________________________\n",
      "dense_37 (Dense)             (None, 15)                315       \n",
      "_________________________________________________________________\n",
      "dense_38 (Dense)             (None, 10)                160       \n",
      "_________________________________________________________________\n",
      "dense_39 (Dense)             (None, 25)                275       \n",
      "_________________________________________________________________\n",
      "dense_40 (Dense)             (None, 1)                 26        \n",
      "=================================================================\n",
      "Total params: 11,261\n",
      "Trainable params: 11,261\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# create specified network\n",
    "ann = Sequential()\n",
    "\n",
    "# first layer \n",
    "ann.add(Dense(40, input_shape = (198,)))\n",
    "\n",
    "# second layer\n",
    "ann.add(Dense(30, activation='relu', kernel_initializer='normal'))\n",
    "\n",
    "# third layer \n",
    "ann.add(Dense(25, activation='relu', kernel_initializer='normal'))\n",
    "\n",
    "# fourth layer \n",
    "ann.add(Dense(20, activation='relu', kernel_initializer='normal'))\n",
    "\n",
    "# fifth layer \n",
    "ann.add(Dense(15, activation='relu', kernel_initializer='normal'))\n",
    "\n",
    "# sixth layer \n",
    "ann.add(Dense(10, activation='relu', kernel_initializer='normal'))\n",
    "\n",
    "# seventh layer \n",
    "ann.add(Dense(25, activation='relu', kernel_initializer='normal'))\n",
    "\n",
    "# output layer \n",
    "ann.add(Dense(1, activation='linear', kernel_initializer='normal'))\n",
    "\n",
    "# compile it \n",
    "ann.compile(loss='mean_squared_error', optimizer='nadam')\n",
    "\n",
    "ann.summary()\n",
    "\n",
    "ann_hist = ann.fit(\n",
    "    X_train, y_train,\n",
    "    batch_size = 256, epochs=50,\n",
    "    validation_split = 0.5, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "ann_pred = ann.predict(X_test)\n",
    "ann_pred_class = ann_pred > 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4909554834026992\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.806716064953492"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ann_log_loss = log_loss(y_test, ann_pred)\n",
    "print(ann_log_loss)\n",
    "accuracy_score(y_test, ann_pred_class)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 3: Model Comparison\n",
    "\n",
    "**3.1 Create a table comparing all validation log losses you found above.**\n",
    "\n",
    "**3.2 Which model did best ?**\n",
    "\n",
    "**3.3 Would you invest your money based on these results? What could you improve?  (code optional)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Linear</th>\n",
       "      <th>Logistic</th>\n",
       "      <th>Bagging</th>\n",
       "      <th>Random Forrest</th>\n",
       "      <th>Neural Net</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>log_loss</th>\n",
       "      <td>0.474477</td>\n",
       "      <td>0.440194</td>\n",
       "      <td>0.471989</td>\n",
       "      <td>0.44424</td>\n",
       "      <td>0.490955</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Linear  Logistic   Bagging  Random Forrest  Neural Net\n",
       "log_loss  0.474477  0.440194  0.471989         0.44424    0.490955"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab = pd.DataFrame({'log_loss': [lin_reg_log_loss, log_reg_reg_log_loss, bag_log_loss, rf_log_loss, ann_log_loss]})\n",
    "tab = tab.T\n",
    "tab.columns = ['Linear','Logistic','Bagging','Random Forrest','Neural Net']\n",
    "tab"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the log loss it appears that logistic did the best. I would no invest money on these results - risk averse and not good enough predictions. Might be able to improve predictions by tuning the neural net. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<hr style=\"height:2pt\">"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
